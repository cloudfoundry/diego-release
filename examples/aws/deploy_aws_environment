#!/bin/bash

set -e

SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)

function usage() {
  >&2 cat <<EOF
  SYNOPSIS:
    Create a CloudFormation stack, deploy BOSH, and create initial CF and Diego stubs.

  USAGE:
    $0 (create|update|skip) [skip-bosh-init] CF_RELEASE_DIR DEPLOYMENT_DIR [STACK_NAME]

  MANDATORY ARGUMENTS:
    create:             Create the aws stack. It is an error to use create if the stack STACK_NAME already exists
    update:             Updates the aws stack. It is an error to use update if the stack STACK_NAME does not exist or if there are no changes to apply
    skip:               Skips aws stack create/update
    CF_RELEASE_DIR:     Path to the local cf-release repository.
    DEPLOYMENT_DIR:     Directory to store files for this deployment.

  OPTIONAL ARGUMENTS:
    skip-bosh-init:     skips deploying the bosh director using bosh-init
    STACK_NAME:         Name of the CloudFormation stack to create (default: cf-diego-stack)
EOF
  exit 1
}


indent() {
  sed -e 's/^/  /'
}

indent_contents_of() {
  indent < "$1"
}

block() {
  cat <<-EOF
$1: |
$(indent_contents_of "$2")
EOF
}

oneline() {
  cat <<-EOF
$1: '$(cat $2)'
EOF
}

cf_credentials() {
  cat <<-EOF
# GENERATED: NO TOUCHING
---
cf_credentials:
  ssh_host_key_fingerprint: "$(cat keypair/ssh-proxy-host-key-fingerprint)"
  consul:
$(block ca_cert     certs/consul-certs/server-ca.crt | indent | indent)
$(block agent_cert  certs/consul-certs/agent.crt     | indent | indent)
$(block agent_key   certs/consul-certs/agent.key     | indent | indent)
$(block server_cert certs/consul-certs/server.crt    | indent | indent)
$(block server_key  certs/consul-certs/server.key    | indent | indent)
  uaa:
$(block   signing_key       keypair/uaa                       | indent | indent)
$(block   verification_key  keypair/uaa.pub                   | indent | indent)
$(block   saml_cert         certs/uaa-certs/saml.crt          | indent | indent)
$(block   saml_key          certs/uaa-certs/saml.key          | indent | indent)
$(oneline saml_key_password certs/uaa-certs/saml.key.password | indent | indent)
$(block   ca_cert           certs/uaa-certs/server-ca.crt     | indent | indent)
$(block   server_key        certs/uaa-certs/server.key        | indent | indent)
$(block   server_cert       certs/uaa-certs/server.crt        | indent | indent)
  loggregator:
$(block ca_cert                certs/loggregator-certs/loggregator-ca.crt    | indent | indent)
$(block doppler_cert           certs/loggregator-certs/doppler.crt           | indent | indent)
$(block doppler_key            certs/loggregator-certs/doppler.key           | indent | indent)
$(block trafficcontroller_cert certs/loggregator-certs/trafficcontroller.crt | indent | indent)
$(block trafficcontroller_key  certs/loggregator-certs/trafficcontroller.key | indent | indent)
$(block metron_cert            certs/loggregator-certs/metron.crt            | indent | indent)
$(block metron_key             certs/loggregator-certs/metron.key            | indent | indent)
EOF
}

diego_credentials() {
  cat <<-EOF
# GENERATED: NO TOUCHING
---
diego_credentials:
$(block diego_ca           certs/diego-ca.crt             | indent)
$(block ssh_proxy_host_key keypair/ssh-proxy-host-key.pem | indent)
  bbs:
$(block client_cert certs/bbs-certs/client.crt  | indent | indent)
$(block client_key  certs/bbs-certs/client.key  | indent | indent)
$(block server_cert certs/bbs-certs/server.crt  | indent | indent)
$(block server_key  certs/bbs-certs/server.key  | indent | indent)
  rep:
$(block client_cert certs/rep-certs/client.crt  | indent | indent)
$(block client_key  certs/rep-certs/client.key  | indent | indent)
$(block server_cert certs/rep-certs/server.crt  | indent | indent)
$(block server_key  certs/rep-certs/server.key  | indent | indent)
  auctioneer:
$(block client_cert certs/auctioneer-certs/client.crt  | indent | indent)
$(block client_key  certs/auctioneer-certs/client.key  | indent | indent)
$(block server_cert certs/auctioneer-certs/server.crt  | indent | indent)
$(block server_key  certs/auctioneer-certs/server.key  | indent | indent)
EOF
}


if [ "$1" == "create" ]; then
  UPDATE_OR_CREATE=create-stack
elif [ "$1" == "update" ]; then
  UPDATE_OR_CREATE=update-stack
elif [ "$1" == "skip" ]; then
  UPDATE_OR_CREATE="skip"
else
  usage
  exit 1
fi

shift

SKIP_BOSH_INIT='false'
if [ "$1" == "skip-bosh-init" ]; then
    SKIP_BOSH_INIT='true'
    shift
fi

cf_release_dir=$1
deployment_dir=$2
stack_name=${3:-cf-diego-stack}

if [ -z ${deployment_dir} ]; then
  usage
fi

command -v aws >/dev/null || { echo "aws is required"; exit 1; }
command -v jq >/dev/null || { echo "jq is required"; exit 1; }
command -v spiff >/dev/null || { echo "spiff is required"; exit 1; }
command -v bosh-init >/dev/null || { echo "bosh-init is required"; exit 1; }

set -x

pushd ${deployment_dir}

mkdir -p stubs/cf
mkdir -p stubs/infrastructure
mkdir -p deployments/bosh-init

source bootstrap_environment

# install certs for ELB
if ! aws iam get-server-certificate --server-certificate-name cfrouter; then
  aws iam upload-server-certificate                   \
    --server-certificate-name cfrouter                \
    --private-key file://certs/elb-cfrouter.key       \
    --certificate-body file://certs/elb-cfrouter.pem
fi

# generate stub to be fed into template for cloudformation
cat > stubs/infrastructure/certificates.yml <<EOF
# GENERATED: NO TOUCHING
EOF

aws iam get-server-certificate --server-certificate-name cfrouter \
  >> stubs/infrastructure/certificates.yml

function extra_subnets {
  cat <<EOF
---
EOF

  if [ -f stubs/infrastructure/extra_subnets.yml ]; then
    spiff merge \
        stubs/infrastructure/extra_subnets.yml \
        $SCRIPT_DIR/templates/infrastructure/meta.yml \
        stubs/infrastructure/availability_zones.yml
  fi
}

# generate cloudformation template
spiff merge \
  $SCRIPT_DIR/templates/infrastructure/boosh.yml \
  $SCRIPT_DIR/templates/infrastructure/boosh-internal.yml \
  stubs/bosh-init/keypair.yml \
  stubs/domain.yml \
  stubs/infrastructure/certificates.yml \
  $SCRIPT_DIR/templates/infrastructure/meta.yml \
  stubs/infrastructure/availability_zones.yml \
  <(extra_subnets) \
  | boosh generate | jq -c -S . \
  > stubs/infrastructure/cloudformation.json

# deploy infrastructure
if [ $UPDATE_OR_CREATE != "skip" ]; then
  aws cloudformation $UPDATE_OR_CREATE \
    --stack-name $stack_name \
    --template-body file://stubs/infrastructure/cloudformation.json

  # ensure that create or update was successful to aws
  boosh watch --name $stack_name
  # generate AWS resources stub for shared purposes
  cat > stubs/aws-resources.yml <<EOF
# GENERATED: NO TOUCHING
EOF

  boosh resources --name $stack_name >> stubs/aws-resources.yml
fi

cat > deployments/bosh-init/bosh-init.yml <<EOF
# GENERATED: NO TOUCHING
EOF

spiff merge \
  $SCRIPT_DIR/templates/bosh-init/bosh-init.yml \
  $SCRIPT_DIR/templates/bosh-init/bosh-init-internal.yml \
  stubs/aws-resources.yml \
  stubs/bosh-init/*.yml \
  >> deployments/bosh-init/bosh-init.yml

if [ "x$SKIP_BOSH_INIT" == 'xfalse' ]; then
    bosh-init deploy deployments/bosh-init/bosh-init.yml
fi
bosh -n target $(cat stubs/aws-resources.yml | grep BoshInit | awk '{ gsub(/"/, "", $NF); print $NF }')

# generate director uuid stub for template to create deployment stub
cat > stubs/director-uuid.yml <<EOF
# GENERATED: NO TOUCHING
---
director_uuid: $(bosh status --uuid | tr -d '\n')
EOF

# generate stub with deployment base domain
cat > stubs/cf/domain.yml <<EOF
# GENERATED: NO TOUCHING
EOF

spiff merge $SCRIPT_DIR/templates/cf/domain.yml \
  $SCRIPT_DIR/templates/cf/domain-internal.yml \
  stubs/domain.yml \
  >> stubs/cf/domain.yml

# override cf and diego instance types
aws_instance_types=""
if [ -f stubs/aws-instance-types.yml ]; then
  aws_instance_types="stubs/aws-instance-types.yml"
fi

# generate deployment stub
cat > stubs/cf/stub.yml <<EOF
# GENERATED: NO TOUCHING
EOF

spiff merge \
  $SCRIPT_DIR/templates/cf/stub.yml \
  $SCRIPT_DIR/templates/cf/stub-internal.yml \
  $aws_instance_types \
  stubs/aws-resources.yml \
  stubs/cf/domain.yml \
  stubs/director-uuid.yml \
  <(cf_credentials) \
  >> stubs/cf/stub.yml

# copy CF property stub if not already present
if [ ! -f stubs/cf/properties.yml ]; then
  cp $SCRIPT_DIR/stubs/cf/properties.yml stubs/cf/properties.yml
fi

mkdir -p stubs/diego
mkdir -p stubs/diego-windows

# generate Diego property-override stub with certs
if [ -f stubs/diego/property-overrides.yml ]; then
  # update BBS certs and keys in existing property-overrides stub
  temp_property_overrides=$(mktemp stubs/diego/property-overrides.yml.XXXXX)

  spiff merge \
    stubs/diego/property-overrides.yml \
    $SCRIPT_DIR/templates/diego/property-overrides-internal.yml \
    <(diego_credentials) \
    > "${temp_property_overrides}"

  mv "${temp_property_overrides}" stubs/diego/property-overrides.yml
else
  # create new property-overrides stub with default overrides
  spiff merge \
    $SCRIPT_DIR/templates/diego/property-overrides.yml \
    $SCRIPT_DIR/templates/diego/property-overrides-internal.yml \
    <(diego_credentials) \
    > stubs/diego/property-overrides.yml
fi

# generate Diego IaaS-settings stub
spiff merge \
  $SCRIPT_DIR/../../manifest-generation/misc-templates/aws-iaas-settings.yml \
  $SCRIPT_DIR/templates/diego/iaas-settings-internal.yml \
  $aws_instance_types stubs/aws-resources.yml \
  > stubs/diego/iaas-settings.yml

# generate Diego Windows IaaS-settings stub
spiff merge \
  $SCRIPT_DIR/../../manifest-generation/misc-templates/windows-iaas-settings.yml \
  $SCRIPT_DIR/templates/diego-windows/iaas-settings-internal.yml \
  $aws_instance_types stubs/aws-resources.yml \
  > stubs/diego-windows/iaas-settings.yml

mkdir -p stubs/cf-mysql

# generate CF-MySQL IaaS-settings stub
spiff merge \
  $SCRIPT_DIR/templates/mysql/iaas-settings.yml \
  $SCRIPT_DIR/templates/mysql/iaas-settings-internal.yml \
  stubs/aws-resources.yml \
  > stubs/cf-mysql/iaas-settings.yml

# generate datadog firehose nozzle manifest if the user stubs exist
if [ -d stubs/datadog-firehose-nozzle ]; then
    spiff merge \
          $SCRIPT_DIR/templates/datadog-firehose-nozzle/datadog-firehose-nozzle.yml \
          stubs/aws-resources.yml \
          stubs/cf/properties.yml \
          stubs/cf/stub.yml \
          stubs/cf/domain.yml \
          stubs/director-uuid.yml \
          stubs/datadog-firehose-nozzle/datadog.yml \
          stubs/datadog-firehose-nozzle/property-overrides.yml \
          > deployments/datadog-firehose-nozzle.yml
fi
popd
