---
meta:
  zones:
    z1: (( Resources.SubnetAvailabilityZone.CFZ1 ))
    z2: (( Resources.SubnetAvailabilityZone.CFZ2 ))
    z3: (( Resources.SubnetAvailabilityZone.CFZ3 ))

  fog_config:
    region: (( Region ))

director_uuid: (( merge ))

networks:
  - name: cf1
    subnets:
      - range:    (( Resources.SubnetCIDR.CFZ1 ))
        reserved: (( [Resources.SubnetOctets.CFZ1.[2] ".2 - " Resources.SubnetOctets.CFZ1.[2] ".9"] ))
        static:   (( [Resources.SubnetOctets.CFZ1.[2] ".10 - " Resources.SubnetOctets.CFZ1.[2] ".63"] ))
        gateway:  (( Resources.SubnetOctets.CFZ1.[2] ".1" ))
        dns:      (( [Resources.SubnetOctets.BOSHZ1.[2] ".2"] ))
        cloud_properties:
          security_groups: (( [Resources.SecurityGroupName.Internal] ))
          subnet: (( Resources.Subnet.CFZ1 ))

  - name: cf2
    subnets:
      - range:    (( Resources.SubnetCIDR.CFZ2 ))
        reserved: (( [Resources.SubnetOctets.CFZ2.[2] ".2 - " Resources.SubnetOctets.CFZ2.[2] ".9"] ))
        static:   (( [Resources.SubnetOctets.CFZ2.[2] ".10 - " Resources.SubnetOctets.CFZ2.[2] ".63"] ))
        gateway:  (( Resources.SubnetOctets.CFZ2.[2] ".1" ))
        dns:      (( [Resources.SubnetOctets.BOSHZ1.[2] ".2"] ))
        cloud_properties:
          security_groups: (( [Resources.SecurityGroupName.Internal] ))
          subnet: (( Resources.Subnet.CFZ2 ))

  - name: cf3
    subnets:
      - range:    (( Resources.SubnetCIDR.CFZ3 ))
        reserved: (( [Resources.SubnetOctets.CFZ3.[2] ".2 - " Resources.SubnetOctets.CFZ3.[2] ".9"] ))
        static:   (( [Resources.SubnetOctets.CFZ3.[2] ".10 - " Resources.SubnetOctets.CFZ3.[2] ".63"] ))
        gateway:  (( Resources.SubnetOctets.CFZ3.[2] ".1" ))
        dns:      (( [Resources.SubnetOctets.BOSHZ1.[2] ".2"] ))
        cloud_properties:
          security_groups: (( [Resources.SecurityGroupName.Internal] ))
          subnet: (( Resources.Subnet.CFZ3 ))

resource_pools:
  - name: small_z1
    cloud_properties:
      instance_type: (( instance_types.small ))
      availability_zone: (( meta.zones.z1 ))

  - name: medium_z1
    cloud_properties:
      instance_type: (( instance_types.medium ))
      availability_zone: (( meta.zones.z1 ))

  - name: large_z1
    cloud_properties:
      instance_type: (( instance_types.large ))
      availability_zone: (( meta.zones.z1 ))

  - name: runner_z1
    cloud_properties:
      instance_type: (( instance_types.runner ))
      availability_zone: (( meta.zones.z1 ))

  - name: router_z1
    cloud_properties:
      instance_type: (( instance_types.router ))
      availability_zone: (( meta.zones.z1 ))
      elbs: (( [Resources.LoadBalancer.CFELB] ))

  - name: small_z2
    cloud_properties:
      instance_type: (( instance_types.small ))
      availability_zone: (( meta.zones.z2 ))

  - name: medium_z2
    cloud_properties:
      instance_type: (( instance_types.medium ))
      availability_zone: (( meta.zones.z2 ))

  - name: large_z2
    cloud_properties:
      instance_type: (( instance_types.large ))
      availability_zone: (( meta.zones.z2 ))

  - name: runner_z2
    cloud_properties:
      instance_type: (( instance_types.runner ))
      availability_zone: (( meta.zones.z2 ))

  - name: router_z2
    cloud_properties:
      instance_type: (( instance_types.router ))
      availability_zone: (( meta.zones.z2 ))
      elbs: (( [Resources.LoadBalancer.CFELB] ))

  - name: small_z3
    cloud_properties:
      instance_type: (( instance_types.small ))
      availability_zone: (( meta.zones.z3 ))

  - name: medium_z3
    cloud_properties:
      instance_type: (( instance_types.medium ))
      availability_zone: (( meta.zones.z3 ))

  - name: large_z3
    cloud_properties:
      instance_type: (( instance_types.large ))
      availability_zone: (( meta.zones.z3 ))

  - name: runner_z3
    cloud_properties:
      instance_type: (( instance_types.runner ))
      availability_zone: (( meta.zones.z3 ))

  - name: router_z3
    cloud_properties:
      instance_type: (( instance_types.router ))
      availability_zone: (( meta.zones.z3 ))
      elbs: (( [Resources.LoadBalancer.CFELB] ))

  - name: small_errand
    cloud_properties:
      instance_type: (( instance_types.small_errand ))
      availability_zone: (( meta.zones.z1 ))

  - name: xlarge_errand
    cloud_properties:
      instance_type: (( instance_types.xlarge_errand ))
      availability_zone: (( meta.zones.z1 ))
jobs:
  - name: postgres_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(32) ))

properties:
  # needed by cf-release
  domain: (( merge ))
  system_domain: (( properties.domain ))
  app_domains:
    - (( properties.domain ))

  template_only:
    aws:
      access_key_id: (( AccessKeyID ))
      secret_access_key: (( SecretAccessKey ))
      subnet_ids:
        cf1: (( Resources.Subnet.CFZ1 ))
        cf2: (( Resources.Subnet.CFZ2 ))
        cf3: (( Resources.Subnet.CFZ3 ))

      availability_zone: (( meta.zones.z1 ))
      availability_zone2: (( meta.zones.z2 ))
      availability_zone3: (( meta.zones.z3 ))

  app_ssh:
    host_key_fingerprint: (( cf_credentials.ssh_host_key_fingerprint ))

  cc:
    resource_pool:
      resource_directory_key: (( Resources.Bucket.AppResources ))
    packages:
      app_package_directory_key: (( Resources.Bucket.AppBits ))
    droplets:
      droplet_directory_key: (( Resources.Bucket.Droplets ))
    buildpacks:
      buildpack_directory_key: (( Resources.Bucket.Buildpacks ))
    mutual_tls:
      ca_cert: (( cf_credentials.cc.ca_cert ))
      public_cert: (( cf_credentials.cc.public_cert ))
      private_key: (( cf_credentials.cc.private_key ))

  ccdb:
    address: (( properties.databases.address ))

  login:
    saml:
      serviceProviderCertificate: (( cf_credentials.uaa.saml_cert ))
      serviceProviderKey: (( cf_credentials.uaa.saml_key ))
      serviceProviderKeyPassword: (( cf_credentials.uaa.saml_key_password ))
  uaa:
    ca_cert: (( cf_credentials.uaa.ca_cert ))
    sslPrivateKey: (( cf_credentials.uaa.server_key ))
    sslCertificate: (( cf_credentials.uaa.server_cert ))
    jwt:
      verification_key: (( cf_credentials.uaa.verification_key ))
      policy:
        active_key_id: key-1
        keys:
          key-1:
            signingKey: (( cf_credentials.uaa.signing_key ))

  uaadb:
    address: (( properties.databases.address ))

  databases:
    address: (( jobs.postgres_z1.networks.cf1.static_ips.[0] ))

  consul:
    ca_cert: (( cf_credentials.consul.ca_cert ))
    server_cert: (( cf_credentials.consul.server_cert ))
    server_key: (( cf_credentials.consul.server_key ))
    agent_cert: (( cf_credentials.consul.agent_cert ))
    agent_key: (( cf_credentials.consul.agent_key ))

  loggregator:
    tls:
      ca_cert: (( cf_credentials.loggregator.ca_cert ))
      doppler:
        cert: (( cf_credentials.loggregator.doppler_cert ))
        key: (( cf_credentials.loggregator.doppler_key ))
      trafficcontroller:
        cert: (( cf_credentials.loggregator.trafficcontroller_cert ))
        key: (( cf_credentials.loggregator.trafficcontroller_key ))
      metron:
        cert: (( cf_credentials.loggregator.metron_cert ))
        key: (( cf_credentials.loggregator.metron_key ))

Resources: (( merge ))
Region: (( merge ))
AccessKeyID: (( merge ))
SecretAccessKey: (( merge ))

cf_credentials: (( merge ))

instance_types:
  small: (( merge || "m3.medium" ))
  medium: (( merge || "m3.medium" ))
  large: (( merge || "m3.large" ))
  runner: (( merge || "m3.large" ))
  router: (( merge || "c3.large" ))
  small_errand: (( merge || "m3.medium" ))
  xlarge_errand: (( merge || "c3.xlarge" ))

