<%=
  conf_dir = "/var/vcap/jobs/auctioneer/config"

  config = {
    auction_runner_workers: 1000,
    communication_timeout: "10s",
    report_interval: "1m",
    lock_retry_interval: "5s",
    lock_ttl: "15s",
    consul_cluster: "http://127.0.0.1:8500",
    debug_address: p("diego.auctioneer.debug_addr"),
    enable_consul_service_registration: p("enable_consul_service_registration"),
    listen_address: p("diego.auctioneer.listen_addr"),
    locks_locket_enabled: p("locks.locket.enabled"),
    log_level: p("diego.auctioneer.log_level"),
    rep_client_session_cache_size: p("diego.auctioneer.rep.client_session_cache_size"),
    rep_require_tls: p("diego.auctioneer.rep.require_tls"),
    cell_state_timeout: p("diego.auctioneer.cell_state_timeout"),
    bin_pack_first_fit_weight: p("diego.auctioneer.bin_pack_first_fit_weight"),
    starting_container_weight: p("diego.auctioneer.starting_container_weight"),
    starting_container_count_maximum: p("diego.auctioneer.starting_container_count_maximum"),
  }

  config[:bbs_ca_cert_file] = "#{conf_dir}/certs/bbs/ca.crt"
  config[:bbs_client_cert_file] = "#{conf_dir}/certs/bbs/client.crt"
  config[:bbs_client_key_file] = "#{conf_dir}/certs/bbs/client.key"
  config[:bbs_address] = "https://#{p("diego.auctioneer.bbs.api_location")}"

  if_p("logging.format.timestamp") do |format|
    if format != "unix-epoch" and format != "rfc3339"
      raise "logging.format.timestamp should be one of: 'unix-epoch' or 'rfc3339'"
    end
    config[:time_format] = format
  end

  if_p("diego.auctioneer.bbs.client_session_cache_size") do |value|
    config[:bbs_client_session_cache_size] = value
  end

  if_p("diego.auctioneer.bbs.max_idle_conns_per_host") do |value|
    config[:bbs_max_idle_conns_per_host] = value
  end

  if_p("diego.auctioneer.rep.ca_cert", "diego.auctioneer.rep.client_key", "diego.auctioneer.rep.client_cert") do
    config[:rep_client_cert] = "#{conf_dir}/certs/rep/client.crt"
    config[:rep_client_key] = "#{conf_dir}/certs/rep/client.key"
    config[:rep_ca_cert] = "#{conf_dir}/certs/rep/ca.crt"
  end

  if p("diego.auctioneer.ca_cert", "") != "" || p("diego.auctioneer.server_cert", "") != "" || p("diego.auctioneer.server_key", "") != ""
    config[:ca_cert_file] = "#{conf_dir}/certs/auctioneer/ca.crt"
    config[:server_cert_file] = "#{conf_dir}/certs/auctioneer/server.crt"
    config[:server_key_file] = "#{conf_dir}/certs/auctioneer/server.key"
  end

  if_p("diego.auctioneer.locket.api_location") do |value|
    config[:locket_address] = value
    config[:uuid] = spec.id
    config[:locket_ca_cert_file] = "#{conf_dir}/certs/bbs/ca.crt"
    config[:locket_client_cert_file] = "#{conf_dir}/certs/bbs/client.crt"
    config[:locket_client_key_file] = "#{conf_dir}/certs/bbs/client.key"
  end

  if_p("diego.auctioneer.skip_consul_lock") do |skip_consul_lock|
    config[:skip_consul_lock] = skip_consul_lock
  end

  if p("locks.locket.enabled") == false && p("diego.auctioneer.skip_consul_lock") == true
    raise "'locks.locket.enabled' can not be false if 'diego.auctioneer.skip_consul_lock' is true."
  end

  config[:loggregator]={}
  config[:loggregator][:loggregator_use_v2_api] = p("loggregator.use_v2_api")
  if p("loggregator.use_v2_api") == true
    config[:loggregator][:loggregator_api_port] = p("loggregator.v2_api_port")
    config[:loggregator][:loggregator_ca_path] = "#{conf_dir}/certs/loggregator/ca.crt"
    config[:loggregator][:loggregator_cert_path] = "#{conf_dir}/certs/loggregator/client.crt"
    config[:loggregator][:loggregator_key_path] = "#{conf_dir}/certs/loggregator/client.key"
    config[:loggregator][:loggregator_job_deployment] = spec.deployment
    config[:loggregator][:loggregator_job_name] = spec.name
    config[:loggregator][:loggregator_job_index] = spec.id
    config[:loggregator][:loggregator_job_ip] = spec.address
    config[:loggregator][:loggregator_job_origin] = "auctioneer"
    config[:loggregator][:loggregator_source_id] = "auctioneer"
    config[:loggregator][:loggregator_instance_id] = spec.id
  end

  config.to_json
%>
