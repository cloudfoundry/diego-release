<%=
  require 'uri'

  conf_dir = "/var/vcap/jobs/bbs/config"
  log_dir = "/var/vcap/sys/log/bbs"

  def parse_ip (ip, var_name)
    unless ip.empty?
      ip = ip.split(":")[0]
	begin
	  parsed = IPAddr.new ip
	rescue  => e
	  raise "Invalid #{var_name} '#{ip}': #{e}"
	end
    end
  end

  parse_ip(p('diego.bbs.debug_addr'), 'diego.bbs.debug_addr')
  parse_ip(p('diego.bbs.listen_addr'), 'diego.bbs.listen_addr')
  parse_ip(p('diego.bbs.health_addr'), 'diego.bbs.health_addr')

  config = {
    session_name: "bbs",
    require_ssl: true,
    communication_timeout: "10s",
    desired_lrp_creation_timeout: "1m",
    lock_ttl: "15s",
    lock_retry_interval: "5s",
    report_interval: "1m",
    convergence_workers: 20,
    update_workers: 1000,
    task_callback_workers: 1000,
    listen_address: p("diego.bbs.listen_addr"),
    health_address: p("diego.bbs.health_addr"),
    rep_client_session_cache_size: p("diego.bbs.rep.client_session_cache_size"),
    rep_require_tls: p("diego.bbs.rep.require_tls"),
    log_level: p("diego.bbs.log_level"),
    active_key_label: p("diego.bbs.active_key_label"),
    debug_address: p("diego.bbs.debug_addr"),
    locks_locket_enabled: p("locks.locket.enabled"),
    cell_registrations_locket_enabled: p("cell_registrations.locket.enabled"),
    max_task_retries: p("tasks.max_retries"),
    max_data_string_length: p("logging.max_data_string_length"),
  }

  def db_params
    ['username', 'password', 'host', 'port', 'schema'].map {|name| "diego.bbs.sql.db_#{name}"}
  end

  def param_exists? param
    p(param) != ""
  end

  def connection_string_from_db_params
    return "" unless db_params.any? {|p| param_exists?(p)}

    unless db_params.all? {|p| param_exists?(p)}
      raise "all of the following parameters must be specified #{db_params.join(",")}"
    end

    values = db_params.map {|param| p(param)}
    # Note: order of the params is important here, it has to be username, password, host, port, schema in that order
    driver = p("diego.bbs.sql.db_driver")
    case driver
    when 'mysql'
      sprintf "%s:%s@tcp(%s:%s)/%s", *values
    when 'postgres'
      sprintf "postgres://%s:%s@%s:%s/%s", *values
    else
      raise "unknown driver #{driver}"
    end
  end

  connection_string = connection_string_from_db_params
  if connection_string == ""
    raise "#{db_params.join(",")} are required fields"
  end

  config[:database_connection_string] = connection_string

  def advertise_url scheme
    base = p("diego.bbs.advertisement_base_hostname")
    port = p("diego.bbs.listen_addr").split(':')[1]
    "#{scheme}://#{name.gsub('_', '-')}-#{spec.index}.#{base}:#{port}"
  end

  config[:encryption_keys] = {}
  p("diego.bbs.encryption_keys").each do |encryption_key|
    label = encryption_key["label"]
    key   = encryption_key["passphrase"]
    config[:encryption_keys][label] = key
  end

  auctioneer_address = p("diego.bbs.auctioneer.api_location")

  config[:auctioneer_address] = "http://#{auctioneer_address}"
  if p("diego.bbs.auctioneer.ca_cert", "") != "" ||
     p("diego.bbs.auctioneer.client_cert", "") != "" ||
     p("diego.bbs.auctioneer.client_key", "") != "" then
    config[:auctioneer_address] = "https://#{auctioneer_address}"
    config[:auctioneer_require_tls] = p("diego.bbs.auctioneer.require_tls")
    config[:auctioneer_client_cert] = "#{conf_dir}/certs/auctioneer/client.crt"
    config[:auctioneer_client_key] = "#{conf_dir}/certs/auctioneer/client.key"
    config[:auctioneer_ca_cert] = "#{conf_dir}/certs/auctioneer/ca.crt"
  end

  if_p("diego.bbs.rep.ca_cert", "diego.bbs.rep.client_key", "diego.bbs.rep.client_cert") do
    config[:rep_client_cert] = "#{conf_dir}/certs/rep/client.crt"
    config[:rep_client_key] = "#{conf_dir}/certs/rep/client.key"
    config[:rep_ca_cert] = "#{conf_dir}/certs/rep/ca.crt"
  end


  if p("diego.bbs.sql.require_ssl")
     config[:sql_ca_cert_file] = "#{conf_dir}/certs/sql/ca.crt"
     config[:sql_enable_identity_verification] = p("database.tls.enable_identity_verification")
  end

  if_p("diego.bbs.sql.max_open_connections") do |value|
    config[:max_open_database_connections] = value
  end

  if_p("diego.bbs.sql.max_idle_connections") do |value|
    config[:max_idle_database_connections] = value
  end

  if_p("diego.bbs.sql.db_driver") do |value|
    config[:database_driver] = value
  end

  if_p("diego.bbs.convergence.expire_completed_task_duration_in_seconds") do |value|
    config[:expire_completed_task_duration] = "#{value}s" # add time unit
  end

  if_p("diego.bbs.convergence.expire_pending_task_duration_in_seconds") do |value|
    config[:expire_pending_task_duration] = "#{value}s" # add time unit
  end

  if_p("diego.bbs.convergence.repeat_interval_in_seconds") do |value|
    config[:converge_repeat_interval] = "#{value}s" # add time unit
  end

  if_p("diego.bbs.convergence.kick_task_duration_in_seconds") do |value|
    config[:kick_task_duration] = "#{value}s" # add time unit
  end

  if_p("logging.format.timestamp") do |format|
    if format != "unix-epoch" and format != "rfc3339"
      raise "logging.format.timestamp should be one of: 'unix-epoch' or 'rfc3339'"
    end
    config[:time_format] = format
  end

  config[:advertise_url] = advertise_url "https"
  config[:ca_file] = "#{conf_dir}/certs/ca.crt"
  config[:cert_file] = "#{conf_dir}/certs/server.crt"
  config[:key_file] = "#{conf_dir}/certs/server.key"

  if p("diego.bbs.enable_access_log")
    config[:access_log_path] = "#{log_dir}/bbs.access.log"
  end

  if_p("diego.bbs.locket.api_location") do |value|
    config[:locket_address] = value
    config[:uuid] = spec.id
    config[:locket_ca_cert_file] = "#{conf_dir}/certs/ca.crt"
    config[:locket_client_cert_file] = "#{conf_dir}/certs/server.crt"
    config[:locket_client_key_file] = "#{conf_dir}/certs/server.key"
  end

  config[:loggregator]={}
  config[:loggregator][:loggregator_use_v2_api] = p("loggregator.use_v2_api")
  if p("loggregator.use_v2_api") == true
    config[:loggregator][:loggregator_api_port] = p("loggregator.v2_api_port")
    config[:loggregator][:loggregator_ca_path] = "#{conf_dir}/certs/loggregator/ca.crt"
    config[:loggregator][:loggregator_cert_path] = "#{conf_dir}/certs/loggregator/client.crt"
    config[:loggregator][:loggregator_key_path] = "#{conf_dir}/certs/loggregator/client.key"
    config[:loggregator][:loggregator_job_deployment] = spec.deployment
    config[:loggregator][:loggregator_job_name] = spec.name
    config[:loggregator][:loggregator_job_index] = spec.id
    config[:loggregator][:loggregator_job_ip] = spec.address
    config[:loggregator][:loggregator_job_origin] = "bbs"
    config[:loggregator][:loggregator_source_id] = "bbs"
    config[:loggregator][:loggregator_instance_id] = spec.id
  end

  config.to_json
%>
