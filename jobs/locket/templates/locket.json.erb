<%=
require 'uri'


CONF_DIR = "/var/vcap/jobs/locket/config"
TMP_DIR = "/var/vcap/data/executor/tmp"
LOG_DIR = "/var/vcap/sys/log/locket"

config = {
 "listen_address" => p("diego.locket.listen_addr"),
 "log_level" => p("diego.locket.log_level"),
 "debug_address" => p("diego.locket.debug_addr"),
}

def db_params
  ['username', 'password', 'host', 'port', 'schema'].map {|name| "diego.locket.sql.db_#{name}"}
end

def param_exists? param
  p(param) != ""
end

def connection_string_from_db_params
  return "" unless db_params.any? {|p| param_exists?(p)}

  unless db_params.all? {|p| param_exists?(p)}
    raise "all of the following parameters must be specified #{db_params.join(",")}"
  end

  values = db_params.map {|param| p(param)}
  # Note: order of the params is important here, it has to be username, password, host, port, schema in that order
  driver = p("diego.locket.sql.db_driver")
  case driver
  when 'mysql'
    sprintf "%s:%s@tcp(%s:%s)/%s", *values
  when 'postgres'
    sprintf "postgres://%s:%s@%s:%s/%s", *values
  when 'mssql'
    sprintf "user id=%s;password=%s;server=%s;port=%s;database=%s;", *values
  else
    raise "unknown driver #{driver}"
  end
end

connection_string = connection_string_from_db_params
config[:database_connection_string] = connection_string
config[:database_driver] = p("diego.locket.sql.db_driver")

config.to_json
%>
