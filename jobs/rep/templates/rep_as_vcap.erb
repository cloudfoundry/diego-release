#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/rep
LOG_DIR=/var/vcap/sys/log/rep
CONF_DIR=/var/vcap/jobs/rep/config
DATA_DIR=/var/vcap/data/executor
CACHE_DIR=<%= p("diego.executor.cache_path") %>
TMP_DIR=$DATA_DIR/tmp

DRIVERS_PATHS=<%= p("diego.executor.volman.driver_paths") %>
TRUSTED_CERTS_DIR=${DATA_DIR}/trusted_certs

PIDFILE=$RUN_DIR/rep.pid

# Enable maximum OS thread concurrency
export GOMAXPROCS=$(nproc)

# Work around for GOLANG 1.5.3 DNS bug
export GODEBUG=netdns=cgo

<% if p("diego.rep.bbs.require_ssl") %>
  bbs_sec_flags=" \
   -bbsClientCert=${CONF_DIR}/certs/bbs/client.crt \
   -bbsClientKey=${CONF_DIR}/certs/bbs/client.key \
   -bbsCACert=${CONF_DIR}/certs/bbs/ca.crt"

  bbs_api_url="<%= "https://" + p("diego.rep.bbs.api_location") %>"
<% else %>
  bbs_sec_flags=""
  bbs_api_url="<%= "http://" + p("diego.rep.bbs.api_location") %>"
<% end %>

<% if p("diego.rep.require_tls") %>
  rep_sec_flags=" \
   -caFile=${CONF_DIR}/certs/ca.crt \
   -certFile=${CONF_DIR}/certs/server.crt \
   -keyFile=${CONF_DIR}/certs/server.key"
<% else %>
  rep_sec_flags=""
<% end %>

zone=<%= Shellwords.shellescape(spec.az || p("diego.rep.zone")) %>
<% if p("diego.rep.use_azure_fault_domains") %> \
set +e
  azure_fd=$(curl -f --max-time 5 --connect-timeout 5 --silent http://169.254.169.254/metadata/v1/InstanceInfo/FD)
  if [ 0 -eq $? ]; then
    zone=z${azure_fd}
  fi
set -e
<% end %>

echo $$ > $PIDFILE

exec /var/vcap/packages/rep/bin/rep ${bbs_sec_flags} ${rep_sec_flags} \
  -bbsAddress=${bbs_api_url} \
  <% if_p("diego.rep.bbs.client_session_cache_size") do |value| %> \
    -bbsClientSessionCacheSize=<%= value %> \
  <% end %> \
  <% if_p("diego.rep.bbs.max_idle_conns_per_host") do |value| %> \
    -bbsMaxIdleConnsPerHost=<%= value %> \
  <% end %> \
  -dropsondePort=<%= p("diego.rep.dropsonde_port") %> \
  -consulCluster=http://127.0.0.1:8500 \
  -debugAddr=<%= p("diego.rep.debug_addr") %> \
  -listenAddr=<%= p("diego.rep.enable_legacy_api_endpoints") ? p("diego.rep.listen_addr") : p("diego.rep.listen_addr_admin") %> \
  -listenAddrSecurable=<%= p("diego.rep.listen_addr_securable") %> \
  -requireTLS=<%= p("diego.rep.require_tls") %> \
  -advertiseDomain=<%= p("diego.rep.advertise_domain") %> \
  -enableLegacyApiServer=<%= p("diego.rep.enable_legacy_api_endpoints") %> \
  <%= p("diego.rep.preloaded_rootfses").map { |rootfs| "-preloadedRootFS #{rootfs}" }.join(" ") %> \
  <%= p("diego.rep.rootfs_providers").map { |provider| "-rootFSProvider #{provider}" }.join(" ") %> \
  <%= p("diego.rep.placement_tags").map { |tag| "-placementTag #{Shellwords.shellescape(tag)}" }.join(" ") %> \
  <%= p("diego.rep.optional_placement_tags").map { |tag| "-optionalPlacementTag #{Shellwords.shellescape(tag)}" }.join(" ") %> \
  -cellID=<%= p("diego.rep.cell_id", "#{spec.job.name}-#{spec.index}-#{spec.id}") %> \
  -zone="${zone}" \
  -pollingInterval=<%= "#{p("diego.rep.polling_interval_in_seconds")}s" %> \
  -evacuationPollingInterval=<%= "#{p("diego.rep.evacuation_polling_interval_in_seconds")}s" %> \
  -evacuationTimeout=<%= "#{p("diego.rep.evacuation_timeout_in_seconds")}s" %> \
  ${trusted_certs_flag} \
  -skipCertVerify=<%= p("diego.ssl.skip_cert_verify") %> \
  -gardenNetwork=<%= p("diego.executor.garden.network") %> \
  -gardenAddr=<%= p("diego.executor.garden.address") %> \
  -memoryMB=<%= p("diego.executor.memory_capacity_mb") %> \
  -diskMB=<%= p("diego.executor.disk_capacity_mb") %> \
  -containerInodeLimit=<%= p("diego.executor.container_inode_limit") %> \
  -containerMaxCpuShares=<%= p("diego.executor.container_max_cpu_shares") %> \
  -cachePath=$CACHE_DIR \
  -maxCacheSizeInBytes=<%= p("diego.executor.max_cache_size_in_bytes") %>\
  -exportNetworkEnvVars=<%= p("diego.executor.export_network_env_vars") %>\
  -healthyMonitoringInterval=<%= "#{p("diego.executor.healthy_monitoring_interval_in_seconds")}s" %> \
  -unhealthyMonitoringInterval=<%= "#{p("diego.executor.unhealthy_monitoring_interval_in_seconds")}s" %> \
  -createWorkPoolSize=<%= p("diego.executor.create_work_pool_size") %> \
  -deleteWorkPoolSize=<%= p("diego.executor.delete_work_pool_size") %> \
  -readWorkPoolSize=<%= p("diego.executor.read_work_pool_size") %> \
  -metricsWorkPoolSize=<%= p("diego.executor.metrics_work_pool_size") %> \
  -healthCheckWorkPoolSize=<%= p("diego.executor.healthcheck_work_pool_size") %> \
  -maxConcurrentDownloads=<%= p("diego.executor.max_concurrent_downloads") %> \
  <% if_p("diego.executor.ca_certs_for_downloads") do |value| %> \
    <% if !value.empty? %> \
     -caCertsForDownloads=$CONF_DIR/certs/rep/ca_certs_for_downloads.crt \
    <% end %> \
  <% end %> \
  -tempDir=$TMP_DIR \
  -volmanDriverPaths=$DRIVERS_PATHS \
  -logLevel=<%= p("diego.rep.log_level") %> \
  -gardenHealthcheckInterval=<%= p("diego.executor.garden_healthcheck.interval") %> \
  -gardenHealthcheckTimeout=<%= p("diego.executor.garden_healthcheck.timeout") %> \
  -gardenHealthcheckCommandRetryPause=<%= p("diego.executor.garden_healthcheck.command_retry_pause") %> \
  -gardenHealthcheckProcessPath=<%= p("diego.executor.garden_healthcheck.process.path") %> \
  -gardenHealthcheckProcessUser=<%= p("diego.executor.garden_healthcheck.process.user") %> \
  <% if_p("diego.executor.garden_healthcheck.process.dir") do |value| %> \
    -gardenHealthcheckProcessDir=<%= value %> \
  <% end %> \
  <% if_p("diego.executor.garden_healthcheck.process.args") do |value| %> \
    -gardenHealthcheckProcessArgs=<%= Shellwords.shellescape(value) %> \
  <% end %> \
  <% if_p("diego.executor.garden_healthcheck.process.env") do |value| %> \
    -gardenHealthcheckProcessEnv=<%= Shellwords.shellescape(value) %> \
  <% end %> \
  <% if_p("diego.executor.post_setup_user") do |value| %> \
    -postSetupUser=<%= value %> \
  <% end %> \
  <% if_p("diego.executor.post_setup_hook") do |value| %> \
    -postSetupHook=<%= Shellwords.shellescape(value) %> \
  <% end %> \
  <% if_p("diego.executor.container_metrics_report_interval") do |value| %> \
    -containerMetricsReportInterval=<%= value %> \
  <% end %> \
  2> >(tee -a $LOG_DIR/rep.stderr.log | logger -p user.error -t vcap.rep) \
  1> >(tee -a $LOG_DIR/rep.stdout.log | logger -t vcap.rep)
