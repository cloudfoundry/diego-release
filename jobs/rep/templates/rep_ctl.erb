#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/rep
LOG_DIR=/var/vcap/sys/log/rep
CONF_DIR=/var/vcap/jobs/rep/config

DATA_DIR=/var/vcap/data/executor
CACHE_DIR=<%= p("diego.executor.cache_path") %>
TMP_DIR=$DATA_DIR/tmp

PIDFILE=$RUN_DIR/rep.pid

source /var/vcap/packages/pid_utils/pid_utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "rep"

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    mkdir -p $DATA_DIR
    chown -R vcap:vcap $DATA_DIR

    mkdir -p $TMP_DIR
    chown -R vcap:vcap $TMP_DIR

    mkdir -p $CACHE_DIR
    chown -R vcap:vcap $CACHE_DIR

    DRIVERS_PATHS=<%= p("diego.executor.volman.driver_paths") %>
    mkdir -p $DRIVERS_PATHS
    chown vcap:vcap $DRIVERS_PATHS

    # Key and Cert are generally ~2048 bytes. Add an extra 2048 for extra space
    instance_cert_and_key_size=6144
    instance_ca_size=$(wc -c ${CONF_DIR}/certs/rep/instance_identity.crt | cut -d' ' -f1)
    max_containers=250
    instance_tmpfs_size=$((($instance_ca_size + $instance_cert_and_key_size) * $max_containers))

    INSTANCE_IDENTITY_DIR=${DATA_DIR}/instance_identity
    if mount | grep -q $INSTANCE_IDENTITY_DIR; then
      umount -f $INSTANCE_IDENTITY_DIR
    fi
    mkdir -p "$INSTANCE_IDENTITY_DIR"
    mount -t tmpfs -o size=$instance_tmpfs_size tmpfs $INSTANCE_IDENTITY_DIR
    chown -R vcap:vcap "$INSTANCE_IDENTITY_DIR"
    chmod 0700 "$INSTANCE_IDENTITY_DIR"

    TRUSTED_CERTS_DIR=${DATA_DIR}/trusted_certs
    rm -rf "$TRUSTED_CERTS_DIR"
    <% if_p("diego.rep.trusted_certs") do |value| %>
      mkdir -p "$TRUSTED_CERTS_DIR"
      chown -R vcap:vcap $TRUSTED_CERTS_DIR

      # Split files on '----END CERTIFICATE-----' and increment our file counter by 1
      pushd $TRUSTED_CERTS_DIR
              awk -v n=1 '
                      split_after == 1 {n++;split_after=0}
                      /-----END CERTIFICATE-----/ {split_after=1}
                      NF {print > "trusted_ca_" n ".crt"}' < $CONF_DIR/certs/rep/trusted_certs.crt
      popd
    <% end %>

    if running_in_container; then
        echo "Not setting /proc/sys/net/ipv4 parameters, since I'm running inside a linux container"
    else
        # TCP_FIN_TIMEOUT
        # This setting determines the time that must elapse before TCP/IP can release a closed connection and reuse
        # its resources. During this TIME_WAIT state, reopening the connection to the client costs less than establishing
        # a new connection. By reducing the value of this entry, TCP/IP can release closed connections faster, making more
        # resources available for new connections. Addjust this in the presense of many connections sitting in the
        # TIME_WAIT state:

        echo 10 > /proc/sys/net/ipv4/tcp_fin_timeout

        # TCP_TW_REUSE
        # This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint.
        # Default value is 0 (disabled). It is generally a safer alternative to tcp_tw_recycle

        echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse

        # NF_CONNTRACK_MAX
        # Default value is 65536. We set it to a larger number to avoid running out of connections.
        echo 262144 > /proc/sys/net/netfilter/nf_conntrack_max
    fi

    # Allowed number of open file descriptors
    ulimit -n 100000

    exec chpst -u vcap:vcap /var/vcap/jobs/rep/bin/rep_as_vcap

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: rep_ctl {start|stop}"

    ;;

esac
