$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }

Write-Host "Running pre-start"

$port="<%= p("diego.rep.enable_legacy_api_endpoints") ? p("diego.rep.listen_addr").sub(/^0\.0\.0\.0:/, "") : p("diego.rep.listen_addr_admin").sub(/^127\.0\.0\.1:/, "")%>"

if ($port -eq "") {
  Write-Error "Unable to find the port for rep_windows"
}
if (-Not (Get-NetFirewallRule | Where-Object { $_.DisplayName -eq "RepPort" })) {
  New-NetFirewallRule -DisplayName "RepPort" -Action Allow -Direction Inbound -Enabled True -LocalPort $port -Protocol TCP
  if (-Not (Get-NetFirewallRule | Where-Object { $_.DisplayName -eq "RepPort" })) {
    Write-Error "Unable to add RepPort firewall rule"
  }
}

$port="<%= p("diego.rep.listen_addr_securable").match(/:(\d+)/)[1]%>"

if ($port -eq "") {
  Write-Error "Unable to find the listen_addr_securable port for rep_windows"
}
if (-Not (Get-NetFirewallRule | Where-Object { $_.DisplayName -eq "SecureRepPort" })) {
  New-NetFirewallRule -DisplayName "SecureRepPort" -Action Allow -Direction Inbound -Enabled True -LocalPort $port -Protocol TCP
  if (-Not (Get-NetFirewallRule | Where-Object { $_.DisplayName -eq "SecureRepPort" })) {
    Write-Error "Unable to add RepPort firewall rule"
  }
}

$cache_dir = "/var/vcap/data/rep/download_cache"
New-Item -Path $cache_dir -ItemType "directory" -Force

$instance_identity_dir = "/var/vcap/data/rep/instance_identity"
New-Item -Path $instance_identity_dir -ItemType "directory" -Force

<% if p("diego.rep.open_bindmounts_acl") %>
  # Set ACL on download cache  + IICs to open up to container users
  $rule = New-Object System.Security.AccessControl.FileSystemAccessRule("Users", "ReadAndExecute", "ContainerInherit, ObjectInherit", "None", "Allow")
  $acl = Get-Acl $cache_dir
  $acl.AddAccessRule($rule)
  Set-Acl $cache_dir $acl

  $rule = New-Object System.Security.AccessControl.FileSystemAccessRule("Users", "ReadAndExecute", "ContainerInherit, ObjectInherit", "None", "Allow")
  $acl = Get-Acl $instance_identity_dir
  $acl.AddAccessRule($rule)
  Set-Acl $instance_identity_dir $acl
<% end %>

$conf_dir = "C:/var/vcap/jobs/rep_windows/config"
<% if_p("diego.rep.trusted_certs") do |value| %>
  $trusted_certs_dir = "C:/var/vcap/data/rep/trusted_certs"
  New-Item -Path $trusted_certs_dir -ItemType "directory" -Force
  $rule = New-Object System.Security.AccessControl.FileSystemAccessRule("Users", "ReadAndExecute", "ContainerInherit, ObjectInherit", "None", "Allow")
  $acl = Get-Acl $trusted_certs_dir
  $acl.AddAccessRule($rule)
  Set-Acl $trusted_certs_dir $acl

  C:/var/vcap/packages/certsplitter_windows/certsplitter $conf_dir/certs/rep/trusted_certs.crt $trusted_certs_dir
<% end %>
