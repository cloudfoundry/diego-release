<%=
  CONF_DIR="/var/vcap/jobs/rep_windows/config"

  class ::String
    def wrap s
      s + self + s
    end
  end

  def escape_string s
    # From http://www.rlmueller.net/PowerShellEscape.htm
    # Escaping rules:
    # 1. replace backtick with double backticks (since backtick is the escape char in powershell)
    # 2. replace double quotes with two double quotes, this is how it is escaped in powershell
    # 3. add backslack before every double quote. looks like golang flag parser doesn't like to see dangling double quotes
    # 4. wrap the entire value in double quotes
    s = s.sub('`', '``').sub('"', '\""').wrap('"')
  end

  def placement_tag arg_name, arg_value
    %Q{-#{arg_name}=#{escape_string arg_value}}
  end

  def tags_args arg_name, args
    args.map { |arg| placement_tag arg_name, arg}.join(" ")
  end

  def placement_tags args
    tags_args "placementTag", args
  end

  def optional_placement_tags args
    tags_args "optionalPlacementTag", args
  end

  if p("diego.rep.bbs.require_ssl")
    bbs_sec_flags=%{ \
   -bbsClientCert="#{CONF_DIR}/certs/bbs/client.crt" \
   -bbsClientKey="#{CONF_DIR}/certs/bbs/client.key" \
   -bbsCACert="#{CONF_DIR}/certs/bbs/ca.crt"}
   bbs_api_url="https://" + p("diego.rep.bbs.api_location")
  else
    bbs_sec_flags=""
    bbs_api_url="http://" + p("diego.rep.bbs.api_location")
  end
  preloaded_rootfses = p("diego.rep.preloaded_rootfses").map { |rootfs|
    %{-preloadedRootFS="#{rootfs}"}
  }.join(" ")

  if p("diego.rep.require_tls")
    rep_sec_flags=%{ \
    -caFile="#{CONF_DIR}/certs/ca.crt" \
    -certFile="#{CONF_DIR}/certs/server.crt" \
    -keyFile="#{CONF_DIR}/certs/server.key"}
  else
    rep_sec_flags=""
  end

  zone= Shellwords.shellescape(spec.az || p("diego.rep.zone"))

  %{/var/vcap/packages/rep_windows/rep.exe #{bbs_sec_flags} #{rep_sec_flags} \
  -bbsAddress="#{bbs_api_url}" \
  -requireTLS="#{p("diego.rep.require_tls")}" \
  -consulCluster="http://127.0.0.1:#{p("diego.rep.consul_agent_port")}" \
  -debugAddr="#{p("diego.rep.debug_addr")}" \
  -listenAddr="#{p("diego.rep.enable_legacy_api_endpoints") ? p("diego.rep.listen_addr") : p("diego.rep.listen_addr_admin")}" \
  -advertiseDomain="#{p("diego.rep.advertise_domain")}" \
  -enableLegacyApiServer="#{p("diego.rep.enable_legacy_api_endpoints")}" \
  #{preloaded_rootfses} \
  -cellID="#{p("diego.rep.cell_id", "#{spec.job.name}-#{spec.index}-#{spec.id}")}" \
  -zone="#{zone}" \
  -pollingInterval="#{p("diego.rep.polling_interval_in_seconds")}s" \
  -evacuationPollingInterval="#{p("diego.rep.evacuation_polling_interval_in_seconds")}s" \
  -evacuationTimeout="#{p("diego.rep.evacuation_timeout_in_seconds")}s" \
  -skipCertVerify=#{p("diego.ssl.skip_cert_verify")} \
  -gardenNetwork=tcp \
  -gardenAddr="127.0.0.1:9241" \
  -memoryMB=#{p("diego.executor.memory_capacity_mb")} \
  -diskMB=#{p("diego.executor.disk_capacity_mb")} \
  -containerMaxCpuShares=#{p("diego.executor.container_max_cpu_shares")} \
  -cachePath=#{p("diego.executor.cache_path")} \
  -maxCacheSizeInBytes=#{p("diego.executor.max_cache_size_in_bytes")} \
  -exportNetworkEnvVars=#{p("diego.executor.export_network_env_vars")} \
  -healthyMonitoringInterval="#{p("diego.executor.healthy_monitoring_interval_in_seconds")}s" \
  -unhealthyMonitoringInterval="#{p("diego.executor.unhealthy_monitoring_interval_in_seconds")}s" \
  -createWorkPoolSize=#{p("diego.executor.create_work_pool_size")} \
  -deleteWorkPoolSize=#{p("diego.executor.delete_work_pool_size")} \
  -readWorkPoolSize=#{p("diego.executor.read_work_pool_size")} \
  -metricsWorkPoolSize=#{p("diego.executor.metrics_work_pool_size")} \
  -healthCheckWorkPoolSize=#{p("diego.executor.healthcheck_work_pool_size")} \
  -tempDir=/var/vcap/data/executor/tmp \
  -gardenHealthcheckProcessUser=#{p("diego.executor.garden_healthcheck.process.user")} \
  -gardenHealthcheckProcessPath=C:\\windows\\system32\\cmd.exe \
  -gardenHealthcheckProcessArgs="/c,dir" \
  -logLevel=#{p("diego.rep.log_level")} \
  } +
    placement_tags(p("diego.rep.placement_tags")) +
    " " +
    optional_placement_tags(p("diego.rep.optional_placement_tags"))
  %>
