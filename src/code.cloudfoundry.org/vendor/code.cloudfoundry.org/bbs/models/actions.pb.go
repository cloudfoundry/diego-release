// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actions.proto

package models

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Action struct {
	// Note: we only expect one of the following set of fields to be
	// set. Previously we used `option (gogoproto.onlyone) = true' but since this
	// is now deprecated and oneof introduces a lot of structural changes, we
	// deferred on switching to oneof for now until there is a good reason for it.
	// disadvantages of using multiple optionals as opposed to oneof are:
	//   - less memory usage
	// disadvantages of using multiple optionals without onlyone:
	//   - writing our own GetAction/SetAction methods
	// action oneof {
	DownloadAction     *DownloadAction     `protobuf:"bytes,1,opt,name=download_action,json=downloadAction,proto3" json:"download,omitempty"`
	UploadAction       *UploadAction       `protobuf:"bytes,2,opt,name=upload_action,json=uploadAction,proto3" json:"upload,omitempty"`
	RunAction          *RunAction          `protobuf:"bytes,3,opt,name=run_action,json=runAction,proto3" json:"run,omitempty"`
	TimeoutAction      *TimeoutAction      `protobuf:"bytes,4,opt,name=timeout_action,json=timeoutAction,proto3" json:"timeout,omitempty"`
	EmitProgressAction *EmitProgressAction `protobuf:"bytes,5,opt,name=emit_progress_action,json=emitProgressAction,proto3" json:"emit_progress,omitempty"`
	TryAction          *TryAction          `protobuf:"bytes,6,opt,name=try_action,json=tryAction,proto3" json:"try,omitempty"`
	ParallelAction     *ParallelAction     `protobuf:"bytes,7,opt,name=parallel_action,json=parallelAction,proto3" json:"parallel,omitempty"`
	SerialAction       *SerialAction       `protobuf:"bytes,8,opt,name=serial_action,json=serialAction,proto3" json:"serial,omitempty"`
	CodependentAction  *CodependentAction  `protobuf:"bytes,9,opt,name=codependent_action,json=codependentAction,proto3" json:"codependent,omitempty"`
}

func (m *Action) Reset()      { *m = Action{} }
func (*Action) ProtoMessage() {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeb49063df94c2b8, []int{0}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return m.Size()
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetDownloadAction() *DownloadAction {
	if m != nil {
		return m.DownloadAction
	}
	return nil
}

func (m *Action) GetUploadAction() *UploadAction {
	if m != nil {
		return m.UploadAction
	}
	return nil
}

func (m *Action) GetRunAction() *RunAction {
	if m != nil {
		return m.RunAction
	}
	return nil
}

func (m *Action) GetTimeoutAction() *TimeoutAction {
	if m != nil {
		return m.TimeoutAction
	}
	return nil
}

func (m *Action) GetEmitProgressAction() *EmitProgressAction {
	if m != nil {
		return m.EmitProgressAction
	}
	return nil
}

func (m *Action) GetTryAction() *TryAction {
	if m != nil {
		return m.TryAction
	}
	return nil
}

func (m *Action) GetParallelAction() *ParallelAction {
	if m != nil {
		return m.ParallelAction
	}
	return nil
}

func (m *Action) GetSerialAction() *SerialAction {
	if m != nil {
		return m.SerialAction
	}
	return nil
}

func (m *Action) GetCodependentAction() *CodependentAction {
	if m != nil {
		return m.CodependentAction
	}
	return nil
}

type DownloadAction struct {
	Artifact          string `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	From              string `protobuf:"bytes,2,opt,name=from,proto3" json:"from"`
	To                string `protobuf:"bytes,3,opt,name=to,proto3" json:"to"`
	CacheKey          string `protobuf:"bytes,4,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key"`
	LogSource         string `protobuf:"bytes,5,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
	User              string `protobuf:"bytes,6,opt,name=user,proto3" json:"user"`
	ChecksumAlgorithm string `protobuf:"bytes,7,opt,name=checksum_algorithm,json=checksumAlgorithm,proto3" json:"checksum_algorithm,omitempty"`
	ChecksumValue     string `protobuf:"bytes,8,opt,name=checksum_value,json=checksumValue,proto3" json:"checksum_value,omitempty"`
}

func (m *DownloadAction) Reset()      { *m = DownloadAction{} }
func (*DownloadAction) ProtoMessage() {}
func (*DownloadAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeb49063df94c2b8, []int{1}
}
func (m *DownloadAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadAction.Merge(m, src)
}
func (m *DownloadAction) XXX_Size() int {
	return m.Size()
}
func (m *DownloadAction) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadAction.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadAction proto.InternalMessageInfo

func (m *DownloadAction) GetArtifact() string {
	if m != nil {
		return m.Artifact
	}
	return ""
}

func (m *DownloadAction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *DownloadAction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *DownloadAction) GetCacheKey() string {
	if m != nil {
		return m.CacheKey
	}
	return ""
}

func (m *DownloadAction) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

func (m *DownloadAction) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *DownloadAction) GetChecksumAlgorithm() string {
	if m != nil {
		return m.ChecksumAlgorithm
	}
	return ""
}

func (m *DownloadAction) GetChecksumValue() string {
	if m != nil {
		return m.ChecksumValue
	}
	return ""
}

type UploadAction struct {
	Artifact  string `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	From      string `protobuf:"bytes,2,opt,name=from,proto3" json:"from"`
	To        string `protobuf:"bytes,3,opt,name=to,proto3" json:"to"`
	LogSource string `protobuf:"bytes,4,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
	User      string `protobuf:"bytes,5,opt,name=user,proto3" json:"user"`
}

func (m *UploadAction) Reset()      { *m = UploadAction{} }
func (*UploadAction) ProtoMessage() {}
func (*UploadAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeb49063df94c2b8, []int{2}
}
func (m *UploadAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadAction.Merge(m, src)
}
func (m *UploadAction) XXX_Size() int {
	return m.Size()
}
func (m *UploadAction) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadAction.DiscardUnknown(m)
}

var xxx_messageInfo_UploadAction proto.InternalMessageInfo

func (m *UploadAction) GetArtifact() string {
	if m != nil {
		return m.Artifact
	}
	return ""
}

func (m *UploadAction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *UploadAction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *UploadAction) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

func (m *UploadAction) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type RunAction struct {
	Path              string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path"`
	Args              []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Dir               string                 `protobuf:"bytes,3,opt,name=dir,proto3" json:"dir,omitempty"`
	Env               []*EnvironmentVariable `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty"`
	ResourceLimits    *ResourceLimits        `protobuf:"bytes,5,opt,name=resource_limits,json=resourceLimits,proto3" json:"resource_limits,omitempty"`
	User              string                 `protobuf:"bytes,6,opt,name=user,proto3" json:"user"`
	LogSource         string                 `protobuf:"bytes,7,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
	SuppressLogOutput bool                   `protobuf:"varint,8,opt,name=suppress_log_output,json=suppressLogOutput,proto3" json:"suppress_log_output"`
}

func (m *RunAction) Reset()      { *m = RunAction{} }
func (*RunAction) ProtoMessage() {}
func (*RunAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeb49063df94c2b8, []int{3}
}
func (m *RunAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunAction.Merge(m, src)
}
func (m *RunAction) XXX_Size() int {
	return m.Size()
}
func (m *RunAction) XXX_DiscardUnknown() {
	xxx_messageInfo_RunAction.DiscardUnknown(m)
}

var xxx_messageInfo_RunAction proto.InternalMessageInfo

func (m *RunAction) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *RunAction) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RunAction) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *RunAction) GetEnv() []*EnvironmentVariable {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *RunAction) GetResourceLimits() *ResourceLimits {
	if m != nil {
		return m.ResourceLimits
	}
	return nil
}

func (m *RunAction) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *RunAction) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

func (m *RunAction) GetSuppressLogOutput() bool {
	if m != nil {
		return m.SuppressLogOutput
	}
	return false
}

type TimeoutAction struct {
	Action              *Action `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	DeprecatedTimeoutNs int64   `protobuf:"varint,2,opt,name=deprecated_timeout_ns,json=deprecatedTimeoutNs,proto3" json:"timeout,omitempty"` // Deprecated: Do not use.
	LogSource           string  `protobuf:"bytes,3,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
	TimeoutMs           int64   `protobuf:"varint,4,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms"`
}

func (m *TimeoutAction) Reset()      { *m = TimeoutAction{} }
func (*TimeoutAction) ProtoMessage() {}
func (*TimeoutAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeb49063df94c2b8, []int{4}
}
func (m *TimeoutAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeoutAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeoutAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeoutAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutAction.Merge(m, src)
}
func (m *TimeoutAction) XXX_Size() int {
	return m.Size()
}
func (m *TimeoutAction) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutAction.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutAction proto.InternalMessageInfo

func (m *TimeoutAction) GetAction() *Action {
	if m != nil {
		return m.Action
	}
	return nil
}

// Deprecated: Do not use.
func (m *TimeoutAction) GetDeprecatedTimeoutNs() int64 {
	if m != nil {
		return m.DeprecatedTimeoutNs
	}
	return 0
}

func (m *TimeoutAction) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

func (m *TimeoutAction) GetTimeoutMs() int64 {
	if m != nil {
		return m.TimeoutMs
	}
	return 0
}

type EmitProgressAction struct {
	Action               *Action `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	StartMessage         string  `protobuf:"bytes,2,opt,name=start_message,json=startMessage,proto3" json:"start_message"`
	SuccessMessage       string  `protobuf:"bytes,3,opt,name=success_message,json=successMessage,proto3" json:"success_message"`
	FailureMessagePrefix string  `protobuf:"bytes,4,opt,name=failure_message_prefix,json=failureMessagePrefix,proto3" json:"failure_message_prefix"`
	LogSource            string  `protobuf:"bytes,5,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
}

func (m *EmitProgressAction) Reset()      { *m = EmitProgressAction{} }
func (*EmitProgressAction) ProtoMessage() {}
func (*EmitProgressAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeb49063df94c2b8, []int{5}
}
func (m *EmitProgressAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmitProgressAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmitProgressAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmitProgressAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmitProgressAction.Merge(m, src)
}
func (m *EmitProgressAction) XXX_Size() int {
	return m.Size()
}
func (m *EmitProgressAction) XXX_DiscardUnknown() {
	xxx_messageInfo_EmitProgressAction.DiscardUnknown(m)
}

var xxx_messageInfo_EmitProgressAction proto.InternalMessageInfo

func (m *EmitProgressAction) GetAction() *Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *EmitProgressAction) GetStartMessage() string {
	if m != nil {
		return m.StartMessage
	}
	return ""
}

func (m *EmitProgressAction) GetSuccessMessage() string {
	if m != nil {
		return m.SuccessMessage
	}
	return ""
}

func (m *EmitProgressAction) GetFailureMessagePrefix() string {
	if m != nil {
		return m.FailureMessagePrefix
	}
	return ""
}

func (m *EmitProgressAction) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

type TryAction struct {
	Action    *Action `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	LogSource string  `protobuf:"bytes,2,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
}

func (m *TryAction) Reset()      { *m = TryAction{} }
func (*TryAction) ProtoMessage() {}
func (*TryAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeb49063df94c2b8, []int{6}
}
func (m *TryAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TryAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TryAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TryAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TryAction.Merge(m, src)
}
func (m *TryAction) XXX_Size() int {
	return m.Size()
}
func (m *TryAction) XXX_DiscardUnknown() {
	xxx_messageInfo_TryAction.DiscardUnknown(m)
}

var xxx_messageInfo_TryAction proto.InternalMessageInfo

func (m *TryAction) GetAction() *Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *TryAction) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

type ParallelAction struct {
	Actions   []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	LogSource string    `protobuf:"bytes,2,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
}

func (m *ParallelAction) Reset()      { *m = ParallelAction{} }
func (*ParallelAction) ProtoMessage() {}
func (*ParallelAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeb49063df94c2b8, []int{7}
}
func (m *ParallelAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParallelAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParallelAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParallelAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParallelAction.Merge(m, src)
}
func (m *ParallelAction) XXX_Size() int {
	return m.Size()
}
func (m *ParallelAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ParallelAction.DiscardUnknown(m)
}

var xxx_messageInfo_ParallelAction proto.InternalMessageInfo

func (m *ParallelAction) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *ParallelAction) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

type SerialAction struct {
	Actions   []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	LogSource string    `protobuf:"bytes,2,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
}

func (m *SerialAction) Reset()      { *m = SerialAction{} }
func (*SerialAction) ProtoMessage() {}
func (*SerialAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeb49063df94c2b8, []int{8}
}
func (m *SerialAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerialAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SerialAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SerialAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerialAction.Merge(m, src)
}
func (m *SerialAction) XXX_Size() int {
	return m.Size()
}
func (m *SerialAction) XXX_DiscardUnknown() {
	xxx_messageInfo_SerialAction.DiscardUnknown(m)
}

var xxx_messageInfo_SerialAction proto.InternalMessageInfo

func (m *SerialAction) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *SerialAction) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

type CodependentAction struct {
	Actions   []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	LogSource string    `protobuf:"bytes,2,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
}

func (m *CodependentAction) Reset()      { *m = CodependentAction{} }
func (*CodependentAction) ProtoMessage() {}
func (*CodependentAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeb49063df94c2b8, []int{9}
}
func (m *CodependentAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodependentAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodependentAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodependentAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodependentAction.Merge(m, src)
}
func (m *CodependentAction) XXX_Size() int {
	return m.Size()
}
func (m *CodependentAction) XXX_DiscardUnknown() {
	xxx_messageInfo_CodependentAction.DiscardUnknown(m)
}

var xxx_messageInfo_CodependentAction proto.InternalMessageInfo

func (m *CodependentAction) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *CodependentAction) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

type ResourceLimits struct {
	// Types that are valid to be assigned to OptionalNofile:
	//
	//	*ResourceLimits_Nofile
	OptionalNofile isResourceLimits_OptionalNofile `protobuf_oneof:"optional_nofile"`
	// Types that are valid to be assigned to OptionalNproc:
	//
	//	*ResourceLimits_Nproc
	OptionalNproc isResourceLimits_OptionalNproc `protobuf_oneof:"optional_nproc"`
}

func (m *ResourceLimits) Reset()      { *m = ResourceLimits{} }
func (*ResourceLimits) ProtoMessage() {}
func (*ResourceLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeb49063df94c2b8, []int{10}
}
func (m *ResourceLimits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceLimits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceLimits.Merge(m, src)
}
func (m *ResourceLimits) XXX_Size() int {
	return m.Size()
}
func (m *ResourceLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceLimits.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceLimits proto.InternalMessageInfo

type isResourceLimits_OptionalNofile interface {
	isResourceLimits_OptionalNofile()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isResourceLimits_OptionalNproc interface {
	isResourceLimits_OptionalNproc()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ResourceLimits_Nofile struct {
	Nofile uint64 `protobuf:"varint,1,opt,name=nofile,proto3,oneof" json:"nofile,omitempty"`
}
type ResourceLimits_Nproc struct {
	Nproc uint64 `protobuf:"varint,2,opt,name=nproc,proto3,oneof" json:"nproc,omitempty"`
}

func (*ResourceLimits_Nofile) isResourceLimits_OptionalNofile() {}
func (*ResourceLimits_Nproc) isResourceLimits_OptionalNproc()   {}

func (m *ResourceLimits) GetOptionalNofile() isResourceLimits_OptionalNofile {
	if m != nil {
		return m.OptionalNofile
	}
	return nil
}
func (m *ResourceLimits) GetOptionalNproc() isResourceLimits_OptionalNproc {
	if m != nil {
		return m.OptionalNproc
	}
	return nil
}

func (m *ResourceLimits) GetNofile() uint64 {
	if x, ok := m.GetOptionalNofile().(*ResourceLimits_Nofile); ok {
		return x.Nofile
	}
	return 0
}

// Deprecated: Do not use.
func (m *ResourceLimits) GetNproc() uint64 {
	if x, ok := m.GetOptionalNproc().(*ResourceLimits_Nproc); ok {
		return x.Nproc
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResourceLimits) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResourceLimits_Nofile)(nil),
		(*ResourceLimits_Nproc)(nil),
	}
}

func init() {
	proto.RegisterType((*Action)(nil), "models.Action")
	proto.RegisterType((*DownloadAction)(nil), "models.DownloadAction")
	proto.RegisterType((*UploadAction)(nil), "models.UploadAction")
	proto.RegisterType((*RunAction)(nil), "models.RunAction")
	proto.RegisterType((*TimeoutAction)(nil), "models.TimeoutAction")
	proto.RegisterType((*EmitProgressAction)(nil), "models.EmitProgressAction")
	proto.RegisterType((*TryAction)(nil), "models.TryAction")
	proto.RegisterType((*ParallelAction)(nil), "models.ParallelAction")
	proto.RegisterType((*SerialAction)(nil), "models.SerialAction")
	proto.RegisterType((*CodependentAction)(nil), "models.CodependentAction")
	proto.RegisterType((*ResourceLimits)(nil), "models.ResourceLimits")
}

func init() { proto.RegisterFile("actions.proto", fileDescriptor_eeb49063df94c2b8) }

var fileDescriptor_eeb49063df94c2b8 = []byte{
	// 1073 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0x5f, 0xef, 0x6e, 0x36, 0xf1, 0x6b, 0xd6, 0xc9, 0x4e, 0xfe, 0x74, 0xbb, 0x01, 0x3b, 0x5a,
	0x09, 0x14, 0x21, 0x92, 0x4a, 0x05, 0x71, 0x42, 0x42, 0xdd, 0x82, 0xa8, 0xd4, 0x96, 0x46, 0x93,
	0xd2, 0x0a, 0x09, 0xc9, 0x72, 0xbc, 0xb3, 0x8e, 0x15, 0xdb, 0x63, 0x8d, 0xc7, 0x81, 0xbd, 0x71,
	0xe7, 0xc2, 0x17, 0xe0, 0x80, 0xb8, 0xf0, 0x45, 0x90, 0x38, 0x46, 0x9c, 0x7a, 0xb2, 0xc8, 0xe6,
	0x82, 0x7c, 0xea, 0x47, 0x40, 0x1e, 0xcf, 0x6c, 0xec, 0x4d, 0xab, 0xf4, 0x50, 0x2e, 0xd6, 0xbc,
	0xf7, 0x7e, 0xef, 0xf7, 0x66, 0xde, 0x7b, 0xf3, 0xc6, 0xd0, 0x75, 0x5c, 0xee, 0xd3, 0x28, 0x39,
	0x88, 0x19, 0xe5, 0x14, 0x75, 0x42, 0x3a, 0x26, 0x41, 0x32, 0xd8, 0xf7, 0x7c, 0x7e, 0x92, 0x1e,
	0x1f, 0xb8, 0x34, 0xbc, 0xeb, 0x51, 0x8f, 0xde, 0x15, 0xe6, 0xe3, 0x74, 0x22, 0x24, 0x21, 0x88,
	0x55, 0xe9, 0x36, 0xd8, 0x21, 0xd1, 0x99, 0xcf, 0x68, 0x14, 0x92, 0x88, 0xdb, 0x67, 0x0e, 0xf3,
	0x9d, 0xe3, 0x80, 0x48, 0xce, 0xe1, 0xcf, 0x1d, 0xe8, 0xdc, 0x17, 0x51, 0xd0, 0x0b, 0x58, 0x1b,
	0xd3, 0x1f, 0xa2, 0x80, 0x3a, 0x63, 0xbb, 0x0c, 0xdc, 0xd7, 0x76, 0xb5, 0xbd, 0x5b, 0xf7, 0xb6,
	0x0f, 0xca, 0xc0, 0x07, 0x5f, 0x4a, 0x73, 0xe9, 0x30, 0xda, 0xce, 0x33, 0x0b, 0x29, 0x97, 0x8f,
	0x69, 0xe8, 0x73, 0x12, 0xc6, 0x7c, 0x8a, 0x8d, 0x71, 0x0d, 0x87, 0x9e, 0x42, 0x37, 0x8d, 0xab,
	0xb4, 0x4d, 0x41, 0xbb, 0xa9, 0x68, 0xbf, 0x8d, 0x2b, 0xa4, 0x9b, 0x79, 0x66, 0xad, 0x97, 0xf0,
	0x0a, 0xe5, 0x6a, 0x5a, 0xc1, 0xa0, 0x07, 0x00, 0x2c, 0x8d, 0x14, 0x5b, 0x4b, 0xb0, 0xf5, 0x14,
	0x1b, 0x4e, 0x23, 0x49, 0xd5, 0xcb, 0x33, 0xab, 0xcb, 0xd2, 0xa8, 0xc2, 0xa3, 0x33, 0x65, 0x45,
	0x47, 0x60, 0x70, 0x3f, 0x24, 0x34, 0xe5, 0x8a, 0xa8, 0x2d, 0x88, 0xb6, 0x14, 0xd1, 0xb3, 0xd2,
	0x2a, 0xc9, 0xb6, 0xf2, 0xcc, 0xea, 0x49, 0x87, 0x0a, 0x61, 0x97, 0x57, 0x51, 0xc8, 0x87, 0x4d,
	0x12, 0xfa, 0xdc, 0x8e, 0x19, 0xf5, 0x18, 0x49, 0x12, 0x45, 0xbd, 0x24, 0xa8, 0x07, 0x8a, 0xfa,
	0xab, 0xd0, 0xe7, 0x87, 0x12, 0x22, 0xf9, 0x77, 0xf2, 0xcc, 0xba, 0x5d, 0xf3, 0xad, 0x44, 0x41,
	0xe4, 0x9a, 0x43, 0x91, 0x04, 0xce, 0xa6, 0x2a, 0x40, 0xa7, 0x9e, 0x84, 0x67, 0x6c, 0x5a, 0x4d,
	0x02, 0x67, 0xd3, 0x6a, 0x12, 0xb8, 0xb2, 0x16, 0x35, 0x8f, 0x1d, 0xe6, 0x04, 0x01, 0x09, 0x14,
	0xd3, 0x72, 0xbd, 0xe6, 0x87, 0xd2, 0x5c, 0xad, 0xb9, 0x72, 0xa9, 0xd6, 0x3c, 0xae, 0xe1, 0x8a,
	0x9a, 0x27, 0x84, 0xf9, 0xce, 0x9c, 0x76, 0xa5, 0x5e, 0xf3, 0x23, 0x61, 0xac, 0xd6, 0xbc, 0x84,
	0x57, 0x6b, 0x9e, 0x54, 0x30, 0xc8, 0x05, 0xe4, 0xd2, 0x31, 0x89, 0x49, 0x34, 0x2e, 0xfa, 0x58,
	0xb2, 0xea, 0x82, 0xf5, 0x8e, 0x62, 0x7d, 0x70, 0x85, 0x90, 0xd4, 0x77, 0xf2, 0xcc, 0xda, 0xaa,
	0x38, 0x56, 0xf8, 0x7b, 0xee, 0x22, 0x7a, 0xf8, 0x5b, 0x13, 0x8c, 0x7a, 0x93, 0xa3, 0x01, 0xac,
	0x38, 0x8c, 0xfb, 0x13, 0xc7, 0xe5, 0xe2, 0x3a, 0xe8, 0x78, 0x2e, 0xa3, 0xf7, 0xa0, 0x3d, 0x61,
	0x34, 0x14, 0xfd, 0xac, 0x8f, 0x56, 0xf2, 0xcc, 0x12, 0x32, 0x16, 0x5f, 0xb4, 0x0d, 0x4d, 0x4e,
	0x45, 0x77, 0xea, 0xa3, 0x4e, 0x9e, 0x59, 0x4d, 0x4e, 0x71, 0x93, 0x53, 0xf4, 0x11, 0xe8, 0xae,
	0xe3, 0x9e, 0x10, 0xfb, 0x94, 0x4c, 0x45, 0xcf, 0xe9, 0xa3, 0x6e, 0x9e, 0x59, 0x57, 0x4a, 0xbc,
	0x22, 0x96, 0x8f, 0xc8, 0x14, 0xbd, 0x0f, 0x10, 0x50, 0xcf, 0x4e, 0x68, 0xca, 0x5c, 0x22, 0xba,
	0x48, 0xc7, 0x7a, 0x40, 0xbd, 0x23, 0xa1, 0x28, 0x36, 0x90, 0x26, 0x84, 0x89, 0xea, 0xcb, 0x0d,
	0x14, 0x32, 0x16, 0x5f, 0xb4, 0x0f, 0xc8, 0x3d, 0x21, 0xee, 0x69, 0x92, 0x86, 0xb6, 0x13, 0x78,
	0x94, 0xf9, 0xfc, 0x24, 0x14, 0xf5, 0xd5, 0x71, 0x4f, 0x59, 0xee, 0x2b, 0x03, 0xfa, 0x00, 0x8c,
	0x39, 0xfc, 0xcc, 0x09, 0x52, 0x22, 0x6a, 0xa6, 0xe3, 0xae, 0xd2, 0x3e, 0x2f, 0x94, 0xc3, 0x5f,
	0x35, 0x58, 0xad, 0xde, 0xd8, 0xff, 0x21, 0x43, 0xf5, 0x53, 0xb7, 0xdf, 0x74, 0xea, 0xa5, 0xd7,
	0x9d, 0x7a, 0xf8, 0x67, 0x13, 0xf4, 0xf9, 0x0c, 0x28, 0xb0, 0xb1, 0xc3, 0x4f, 0xca, 0x8d, 0x95,
	0xd8, 0x42, 0xc6, 0xe2, 0x8b, 0x10, 0xb4, 0x1d, 0xe6, 0x25, 0xfd, 0xe6, 0x6e, 0x6b, 0x4f, 0xc7,
	0x62, 0x8d, 0xd6, 0xa1, 0x35, 0xf6, 0x59, 0xb9, 0x2b, 0x5c, 0x2c, 0xd1, 0x3e, 0xb4, 0x48, 0x74,
	0xd6, 0x6f, 0xef, 0xb6, 0xf6, 0x6e, 0xdd, 0xdb, 0x99, 0xdf, 0xe1, 0xab, 0xa9, 0xfa, 0x5c, 0x0e,
	0x55, 0x5c, 0xe0, 0xd0, 0x17, 0xb0, 0xc6, 0x48, 0xb9, 0x77, 0x3b, 0xf0, 0x43, 0x9f, 0x27, 0xf2,
	0xfa, 0xcf, 0xef, 0x14, 0x96, 0xe6, 0xc7, 0xc2, 0x8a, 0x0d, 0x56, 0x93, 0x6f, 0xa8, 0x6a, 0x3d,
	0x39, 0xcb, 0x8b, 0xc9, 0xf9, 0x1a, 0x36, 0x92, 0x34, 0x8e, 0xc5, 0xf0, 0x29, 0x70, 0x34, 0xe5,
	0x71, 0xca, 0x45, 0x29, 0x57, 0x46, 0xb7, 0xf3, 0xcc, 0x7a, 0x9d, 0x19, 0xf7, 0x94, 0xf2, 0x31,
	0xf5, 0x9e, 0x0a, 0xd5, 0xf0, 0x6f, 0x0d, 0xba, 0xb5, 0x11, 0x88, 0x3e, 0x84, 0x4e, 0xed, 0x5d,
	0x30, 0xd4, 0x79, 0x4a, 0x3b, 0x96, 0x56, 0xf4, 0x08, 0xb6, 0xc6, 0x24, 0x66, 0xc4, 0x75, 0x38,
	0x19, 0xdb, 0x6a, 0xc8, 0x46, 0x89, 0xe8, 0x82, 0x96, 0xd8, 0xc4, 0xf5, 0x49, 0xda, 0xd7, 0xf0,
	0xc6, 0x95, 0x97, 0x0c, 0xfc, 0x4d, 0xb2, 0x70, 0xdc, 0xd6, 0xe2, 0x71, 0xf7, 0x01, 0x54, 0x80,
	0x30, 0x11, 0xad, 0xd2, 0x1a, 0x19, 0x79, 0x66, 0x55, 0xb4, 0x58, 0x97, 0xeb, 0x27, 0xc9, 0xf0,
	0xf7, 0x26, 0xa0, 0xeb, 0xc3, 0xf7, 0xad, 0x4f, 0xf6, 0x19, 0x74, 0x13, 0xee, 0x30, 0x6e, 0x87,
	0x24, 0x49, 0x1c, 0x8f, 0xc8, 0xbe, 0x16, 0x33, 0xb6, 0x66, 0xc0, 0xab, 0x42, 0x7c, 0x52, 0x4a,
	0xe8, 0x73, 0x58, 0x4b, 0x52, 0xd7, 0x2d, 0x92, 0xae, 0x3c, 0xcb, 0xae, 0xdf, 0xc8, 0x33, 0x6b,
	0xd1, 0x84, 0x0d, 0xa9, 0x50, 0xde, 0x87, 0xb0, 0x3d, 0x71, 0xfc, 0x20, 0x65, 0x44, 0x41, 0xec,
	0x98, 0x91, 0x89, 0xff, 0xa3, 0x9c, 0x1e, 0x83, 0x3c, 0xb3, 0xde, 0x80, 0xc0, 0x9b, 0x52, 0x2f,
	0xb9, 0x0e, 0x85, 0xf6, 0x86, 0xb1, 0x32, 0xc4, 0xa0, 0xcf, 0x1f, 0x90, 0xb7, 0xce, 0x4d, 0x9d,
	0xb3, 0xb9, 0xc8, 0xf9, 0x1d, 0x18, 0xf5, 0xa7, 0x04, 0xed, 0xc1, 0xb2, 0xfc, 0xbf, 0xe9, 0x6b,
	0xe2, 0x6a, 0x2d, 0x32, 0x2b, 0xf3, 0x4d, 0xd4, 0x2f, 0x60, 0xb5, 0xfa, 0x9c, 0xbc, 0x3b, 0xe2,
	0xef, 0xa1, 0x77, 0xed, 0x45, 0x79, 0x77, 0xec, 0xa7, 0x60, 0xd4, 0x07, 0x01, 0xea, 0x43, 0x27,
	0xa2, 0x13, 0x3f, 0x20, 0x22, 0xd5, 0xed, 0x87, 0x0d, 0x2c, 0x65, 0x34, 0x80, 0xa5, 0x28, 0x66,
	0xd4, 0x15, 0x2c, 0xed, 0x51, 0xb3, 0xaf, 0x3d, 0xd4, 0x70, 0xa9, 0x1a, 0xf5, 0x60, 0x8d, 0xc6,
	0x45, 0x44, 0x27, 0xb0, 0x4b, 0xf8, 0x68, 0x1d, 0x8c, 0x2b, 0x95, 0x00, 0x7d, 0x7a, 0x7e, 0x61,
	0x36, 0x5e, 0x5e, 0x98, 0x8d, 0x57, 0x17, 0xa6, 0xf6, 0xd3, 0xcc, 0xd4, 0xfe, 0x98, 0x99, 0xda,
	0x5f, 0x33, 0x53, 0x3b, 0x9f, 0x99, 0xda, 0x3f, 0x33, 0x53, 0xfb, 0x77, 0x66, 0x36, 0x5e, 0xcd,
	0x4c, 0xed, 0x97, 0x4b, 0xb3, 0x71, 0x7e, 0x69, 0x36, 0x5e, 0x5e, 0x9a, 0x8d, 0xe3, 0x8e, 0xf8,
	0x49, 0xfc, 0xe4, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0xe4, 0x44, 0x5a, 0x89, 0x0a, 0x00,
	0x00,
}

func (this *Action) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Action)
	if !ok {
		that2, ok := that.(Action)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownloadAction.Equal(that1.DownloadAction) {
		return false
	}
	if !this.UploadAction.Equal(that1.UploadAction) {
		return false
	}
	if !this.RunAction.Equal(that1.RunAction) {
		return false
	}
	if !this.TimeoutAction.Equal(that1.TimeoutAction) {
		return false
	}
	if !this.EmitProgressAction.Equal(that1.EmitProgressAction) {
		return false
	}
	if !this.TryAction.Equal(that1.TryAction) {
		return false
	}
	if !this.ParallelAction.Equal(that1.ParallelAction) {
		return false
	}
	if !this.SerialAction.Equal(that1.SerialAction) {
		return false
	}
	if !this.CodependentAction.Equal(that1.CodependentAction) {
		return false
	}
	return true
}
func (this *DownloadAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownloadAction)
	if !ok {
		that2, ok := that.(DownloadAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Artifact != that1.Artifact {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.CacheKey != that1.CacheKey {
		return false
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.ChecksumAlgorithm != that1.ChecksumAlgorithm {
		return false
	}
	if this.ChecksumValue != that1.ChecksumValue {
		return false
	}
	return true
}
func (this *UploadAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UploadAction)
	if !ok {
		that2, ok := that.(UploadAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Artifact != that1.Artifact {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	if this.User != that1.User {
		return false
	}
	return true
}
func (this *RunAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RunAction)
	if !ok {
		that2, ok := that.(RunAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if this.Args[i] != that1.Args[i] {
			return false
		}
	}
	if this.Dir != that1.Dir {
		return false
	}
	if len(this.Env) != len(that1.Env) {
		return false
	}
	for i := range this.Env {
		if !this.Env[i].Equal(that1.Env[i]) {
			return false
		}
	}
	if !this.ResourceLimits.Equal(that1.ResourceLimits) {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	if this.SuppressLogOutput != that1.SuppressLogOutput {
		return false
	}
	return true
}
func (this *TimeoutAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimeoutAction)
	if !ok {
		that2, ok := that.(TimeoutAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if this.DeprecatedTimeoutNs != that1.DeprecatedTimeoutNs {
		return false
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	if this.TimeoutMs != that1.TimeoutMs {
		return false
	}
	return true
}
func (this *EmitProgressAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmitProgressAction)
	if !ok {
		that2, ok := that.(EmitProgressAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if this.StartMessage != that1.StartMessage {
		return false
	}
	if this.SuccessMessage != that1.SuccessMessage {
		return false
	}
	if this.FailureMessagePrefix != that1.FailureMessagePrefix {
		return false
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	return true
}
func (this *TryAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TryAction)
	if !ok {
		that2, ok := that.(TryAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	return true
}
func (this *ParallelAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParallelAction)
	if !ok {
		that2, ok := that.(ParallelAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if !this.Actions[i].Equal(that1.Actions[i]) {
			return false
		}
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	return true
}
func (this *SerialAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SerialAction)
	if !ok {
		that2, ok := that.(SerialAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if !this.Actions[i].Equal(that1.Actions[i]) {
			return false
		}
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	return true
}
func (this *CodependentAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CodependentAction)
	if !ok {
		that2, ok := that.(CodependentAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if !this.Actions[i].Equal(that1.Actions[i]) {
			return false
		}
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	return true
}
func (this *ResourceLimits) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceLimits)
	if !ok {
		that2, ok := that.(ResourceLimits)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OptionalNofile == nil {
		if this.OptionalNofile != nil {
			return false
		}
	} else if this.OptionalNofile == nil {
		return false
	} else if !this.OptionalNofile.Equal(that1.OptionalNofile) {
		return false
	}
	if that1.OptionalNproc == nil {
		if this.OptionalNproc != nil {
			return false
		}
	} else if this.OptionalNproc == nil {
		return false
	} else if !this.OptionalNproc.Equal(that1.OptionalNproc) {
		return false
	}
	return true
}
func (this *ResourceLimits_Nofile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceLimits_Nofile)
	if !ok {
		that2, ok := that.(ResourceLimits_Nofile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nofile != that1.Nofile {
		return false
	}
	return true
}
func (this *ResourceLimits_Nproc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceLimits_Nproc)
	if !ok {
		that2, ok := that.(ResourceLimits_Nproc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nproc != that1.Nproc {
		return false
	}
	return true
}
func (this *Action) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&models.Action{")
	if this.DownloadAction != nil {
		s = append(s, "DownloadAction: "+fmt.Sprintf("%#v", this.DownloadAction)+",\n")
	}
	if this.UploadAction != nil {
		s = append(s, "UploadAction: "+fmt.Sprintf("%#v", this.UploadAction)+",\n")
	}
	if this.RunAction != nil {
		s = append(s, "RunAction: "+fmt.Sprintf("%#v", this.RunAction)+",\n")
	}
	if this.TimeoutAction != nil {
		s = append(s, "TimeoutAction: "+fmt.Sprintf("%#v", this.TimeoutAction)+",\n")
	}
	if this.EmitProgressAction != nil {
		s = append(s, "EmitProgressAction: "+fmt.Sprintf("%#v", this.EmitProgressAction)+",\n")
	}
	if this.TryAction != nil {
		s = append(s, "TryAction: "+fmt.Sprintf("%#v", this.TryAction)+",\n")
	}
	if this.ParallelAction != nil {
		s = append(s, "ParallelAction: "+fmt.Sprintf("%#v", this.ParallelAction)+",\n")
	}
	if this.SerialAction != nil {
		s = append(s, "SerialAction: "+fmt.Sprintf("%#v", this.SerialAction)+",\n")
	}
	if this.CodependentAction != nil {
		s = append(s, "CodependentAction: "+fmt.Sprintf("%#v", this.CodependentAction)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownloadAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&models.DownloadAction{")
	s = append(s, "Artifact: "+fmt.Sprintf("%#v", this.Artifact)+",\n")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "CacheKey: "+fmt.Sprintf("%#v", this.CacheKey)+",\n")
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "ChecksumAlgorithm: "+fmt.Sprintf("%#v", this.ChecksumAlgorithm)+",\n")
	s = append(s, "ChecksumValue: "+fmt.Sprintf("%#v", this.ChecksumValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UploadAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&models.UploadAction{")
	s = append(s, "Artifact: "+fmt.Sprintf("%#v", this.Artifact)+",\n")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RunAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&models.RunAction{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	s = append(s, "Dir: "+fmt.Sprintf("%#v", this.Dir)+",\n")
	if this.Env != nil {
		s = append(s, "Env: "+fmt.Sprintf("%#v", this.Env)+",\n")
	}
	if this.ResourceLimits != nil {
		s = append(s, "ResourceLimits: "+fmt.Sprintf("%#v", this.ResourceLimits)+",\n")
	}
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "SuppressLogOutput: "+fmt.Sprintf("%#v", this.SuppressLogOutput)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimeoutAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&models.TimeoutAction{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "DeprecatedTimeoutNs: "+fmt.Sprintf("%#v", this.DeprecatedTimeoutNs)+",\n")
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "TimeoutMs: "+fmt.Sprintf("%#v", this.TimeoutMs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmitProgressAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&models.EmitProgressAction{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "StartMessage: "+fmt.Sprintf("%#v", this.StartMessage)+",\n")
	s = append(s, "SuccessMessage: "+fmt.Sprintf("%#v", this.SuccessMessage)+",\n")
	s = append(s, "FailureMessagePrefix: "+fmt.Sprintf("%#v", this.FailureMessagePrefix)+",\n")
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TryAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.TryAction{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ParallelAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.ParallelAction{")
	if this.Actions != nil {
		s = append(s, "Actions: "+fmt.Sprintf("%#v", this.Actions)+",\n")
	}
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SerialAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.SerialAction{")
	if this.Actions != nil {
		s = append(s, "Actions: "+fmt.Sprintf("%#v", this.Actions)+",\n")
	}
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CodependentAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.CodependentAction{")
	if this.Actions != nil {
		s = append(s, "Actions: "+fmt.Sprintf("%#v", this.Actions)+",\n")
	}
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResourceLimits) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.ResourceLimits{")
	if this.OptionalNofile != nil {
		s = append(s, "OptionalNofile: "+fmt.Sprintf("%#v", this.OptionalNofile)+",\n")
	}
	if this.OptionalNproc != nil {
		s = append(s, "OptionalNproc: "+fmt.Sprintf("%#v", this.OptionalNproc)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResourceLimits_Nofile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.ResourceLimits_Nofile{` +
		`Nofile:` + fmt.Sprintf("%#v", this.Nofile) + `}`}, ", ")
	return s
}
func (this *ResourceLimits_Nproc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.ResourceLimits_Nproc{` +
		`Nproc:` + fmt.Sprintf("%#v", this.Nproc) + `}`}, ", ")
	return s
}
func valueToGoStringActions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CodependentAction != nil {
		{
			size, err := m.CodependentAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.SerialAction != nil {
		{
			size, err := m.SerialAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ParallelAction != nil {
		{
			size, err := m.ParallelAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TryAction != nil {
		{
			size, err := m.TryAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.EmitProgressAction != nil {
		{
			size, err := m.EmitProgressAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeoutAction != nil {
		{
			size, err := m.TimeoutAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RunAction != nil {
		{
			size, err := m.RunAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UploadAction != nil {
		{
			size, err := m.UploadAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DownloadAction != nil {
		{
			size, err := m.DownloadAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownloadAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChecksumValue) > 0 {
		i -= len(m.ChecksumValue)
		copy(dAtA[i:], m.ChecksumValue)
		i = encodeVarintActions(dAtA, i, uint64(len(m.ChecksumValue)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ChecksumAlgorithm) > 0 {
		i -= len(m.ChecksumAlgorithm)
		copy(dAtA[i:], m.ChecksumAlgorithm)
		i = encodeVarintActions(dAtA, i, uint64(len(m.ChecksumAlgorithm)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintActions(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogSource) > 0 {
		i -= len(m.LogSource)
		copy(dAtA[i:], m.LogSource)
		i = encodeVarintActions(dAtA, i, uint64(len(m.LogSource)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CacheKey) > 0 {
		i -= len(m.CacheKey)
		copy(dAtA[i:], m.CacheKey)
		i = encodeVarintActions(dAtA, i, uint64(len(m.CacheKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintActions(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintActions(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Artifact) > 0 {
		i -= len(m.Artifact)
		copy(dAtA[i:], m.Artifact)
		i = encodeVarintActions(dAtA, i, uint64(len(m.Artifact)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintActions(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LogSource) > 0 {
		i -= len(m.LogSource)
		copy(dAtA[i:], m.LogSource)
		i = encodeVarintActions(dAtA, i, uint64(len(m.LogSource)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintActions(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintActions(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Artifact) > 0 {
		i -= len(m.Artifact)
		copy(dAtA[i:], m.Artifact)
		i = encodeVarintActions(dAtA, i, uint64(len(m.Artifact)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SuppressLogOutput {
		i--
		if m.SuppressLogOutput {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.LogSource) > 0 {
		i -= len(m.LogSource)
		copy(dAtA[i:], m.LogSource)
		i = encodeVarintActions(dAtA, i, uint64(len(m.LogSource)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintActions(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x32
	}
	if m.ResourceLimits != nil {
		{
			size, err := m.ResourceLimits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Env) > 0 {
		for iNdEx := len(m.Env) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Env[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Dir) > 0 {
		i -= len(m.Dir)
		copy(dAtA[i:], m.Dir)
		i = encodeVarintActions(dAtA, i, uint64(len(m.Dir)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintActions(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintActions(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeoutAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeoutAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeoutAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutMs != 0 {
		i = encodeVarintActions(dAtA, i, uint64(m.TimeoutMs))
		i--
		dAtA[i] = 0x20
	}
	if len(m.LogSource) > 0 {
		i -= len(m.LogSource)
		copy(dAtA[i:], m.LogSource)
		i = encodeVarintActions(dAtA, i, uint64(len(m.LogSource)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DeprecatedTimeoutNs != 0 {
		i = encodeVarintActions(dAtA, i, uint64(m.DeprecatedTimeoutNs))
		i--
		dAtA[i] = 0x10
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmitProgressAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmitProgressAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmitProgressAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogSource) > 0 {
		i -= len(m.LogSource)
		copy(dAtA[i:], m.LogSource)
		i = encodeVarintActions(dAtA, i, uint64(len(m.LogSource)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FailureMessagePrefix) > 0 {
		i -= len(m.FailureMessagePrefix)
		copy(dAtA[i:], m.FailureMessagePrefix)
		i = encodeVarintActions(dAtA, i, uint64(len(m.FailureMessagePrefix)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SuccessMessage) > 0 {
		i -= len(m.SuccessMessage)
		copy(dAtA[i:], m.SuccessMessage)
		i = encodeVarintActions(dAtA, i, uint64(len(m.SuccessMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StartMessage) > 0 {
		i -= len(m.StartMessage)
		copy(dAtA[i:], m.StartMessage)
		i = encodeVarintActions(dAtA, i, uint64(len(m.StartMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TryAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TryAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TryAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogSource) > 0 {
		i -= len(m.LogSource)
		copy(dAtA[i:], m.LogSource)
		i = encodeVarintActions(dAtA, i, uint64(len(m.LogSource)))
		i--
		dAtA[i] = 0x12
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParallelAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParallelAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParallelAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogSource) > 0 {
		i -= len(m.LogSource)
		copy(dAtA[i:], m.LogSource)
		i = encodeVarintActions(dAtA, i, uint64(len(m.LogSource)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SerialAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerialAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerialAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogSource) > 0 {
		i -= len(m.LogSource)
		copy(dAtA[i:], m.LogSource)
		i = encodeVarintActions(dAtA, i, uint64(len(m.LogSource)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CodependentAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodependentAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodependentAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogSource) > 0 {
		i -= len(m.LogSource)
		copy(dAtA[i:], m.LogSource)
		i = encodeVarintActions(dAtA, i, uint64(len(m.LogSource)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceLimits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceLimits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceLimits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptionalNproc != nil {
		{
			size := m.OptionalNproc.Size()
			i -= size
			if _, err := m.OptionalNproc.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OptionalNofile != nil {
		{
			size := m.OptionalNofile.Size()
			i -= size
			if _, err := m.OptionalNofile.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceLimits_Nofile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceLimits_Nofile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintActions(dAtA, i, uint64(m.Nofile))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ResourceLimits_Nproc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceLimits_Nproc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintActions(dAtA, i, uint64(m.Nproc))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func encodeVarintActions(dAtA []byte, offset int, v uint64) int {
	offset -= sovActions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownloadAction != nil {
		l = m.DownloadAction.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	if m.UploadAction != nil {
		l = m.UploadAction.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	if m.RunAction != nil {
		l = m.RunAction.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	if m.TimeoutAction != nil {
		l = m.TimeoutAction.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	if m.EmitProgressAction != nil {
		l = m.EmitProgressAction.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	if m.TryAction != nil {
		l = m.TryAction.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	if m.ParallelAction != nil {
		l = m.ParallelAction.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	if m.SerialAction != nil {
		l = m.SerialAction.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	if m.CodependentAction != nil {
		l = m.CodependentAction.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	return n
}

func (m *DownloadAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Artifact)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.CacheKey)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.LogSource)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.ChecksumAlgorithm)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.ChecksumValue)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	return n
}

func (m *UploadAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Artifact)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.LogSource)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	return n
}

func (m *RunAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovActions(uint64(l))
		}
	}
	l = len(m.Dir)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	if len(m.Env) > 0 {
		for _, e := range m.Env {
			l = e.Size()
			n += 1 + l + sovActions(uint64(l))
		}
	}
	if m.ResourceLimits != nil {
		l = m.ResourceLimits.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.LogSource)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	if m.SuppressLogOutput {
		n += 2
	}
	return n
}

func (m *TimeoutAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	if m.DeprecatedTimeoutNs != 0 {
		n += 1 + sovActions(uint64(m.DeprecatedTimeoutNs))
	}
	l = len(m.LogSource)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	if m.TimeoutMs != 0 {
		n += 1 + sovActions(uint64(m.TimeoutMs))
	}
	return n
}

func (m *EmitProgressAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.StartMessage)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.SuccessMessage)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.FailureMessagePrefix)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.LogSource)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	return n
}

func (m *TryAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovActions(uint64(l))
	}
	l = len(m.LogSource)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	return n
}

func (m *ParallelAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovActions(uint64(l))
		}
	}
	l = len(m.LogSource)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	return n
}

func (m *SerialAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovActions(uint64(l))
		}
	}
	l = len(m.LogSource)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	return n
}

func (m *CodependentAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovActions(uint64(l))
		}
	}
	l = len(m.LogSource)
	if l > 0 {
		n += 1 + l + sovActions(uint64(l))
	}
	return n
}

func (m *ResourceLimits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OptionalNofile != nil {
		n += m.OptionalNofile.Size()
	}
	if m.OptionalNproc != nil {
		n += m.OptionalNproc.Size()
	}
	return n
}

func (m *ResourceLimits_Nofile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovActions(uint64(m.Nofile))
	return n
}
func (m *ResourceLimits_Nproc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovActions(uint64(m.Nproc))
	return n
}

func sovActions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActions(x uint64) (n int) {
	return sovActions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Action) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action{`,
		`DownloadAction:` + strings.Replace(this.DownloadAction.String(), "DownloadAction", "DownloadAction", 1) + `,`,
		`UploadAction:` + strings.Replace(this.UploadAction.String(), "UploadAction", "UploadAction", 1) + `,`,
		`RunAction:` + strings.Replace(this.RunAction.String(), "RunAction", "RunAction", 1) + `,`,
		`TimeoutAction:` + strings.Replace(this.TimeoutAction.String(), "TimeoutAction", "TimeoutAction", 1) + `,`,
		`EmitProgressAction:` + strings.Replace(this.EmitProgressAction.String(), "EmitProgressAction", "EmitProgressAction", 1) + `,`,
		`TryAction:` + strings.Replace(this.TryAction.String(), "TryAction", "TryAction", 1) + `,`,
		`ParallelAction:` + strings.Replace(this.ParallelAction.String(), "ParallelAction", "ParallelAction", 1) + `,`,
		`SerialAction:` + strings.Replace(this.SerialAction.String(), "SerialAction", "SerialAction", 1) + `,`,
		`CodependentAction:` + strings.Replace(this.CodependentAction.String(), "CodependentAction", "CodependentAction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownloadAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownloadAction{`,
		`Artifact:` + fmt.Sprintf("%v", this.Artifact) + `,`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`CacheKey:` + fmt.Sprintf("%v", this.CacheKey) + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`ChecksumAlgorithm:` + fmt.Sprintf("%v", this.ChecksumAlgorithm) + `,`,
		`ChecksumValue:` + fmt.Sprintf("%v", this.ChecksumValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UploadAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UploadAction{`,
		`Artifact:` + fmt.Sprintf("%v", this.Artifact) + `,`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RunAction) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEnv := "[]*EnvironmentVariable{"
	for _, f := range this.Env {
		repeatedStringForEnv += strings.Replace(fmt.Sprintf("%v", f), "EnvironmentVariable", "EnvironmentVariable", 1) + ","
	}
	repeatedStringForEnv += "}"
	s := strings.Join([]string{`&RunAction{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`Dir:` + fmt.Sprintf("%v", this.Dir) + `,`,
		`Env:` + repeatedStringForEnv + `,`,
		`ResourceLimits:` + strings.Replace(this.ResourceLimits.String(), "ResourceLimits", "ResourceLimits", 1) + `,`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`SuppressLogOutput:` + fmt.Sprintf("%v", this.SuppressLogOutput) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimeoutAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimeoutAction{`,
		`Action:` + strings.Replace(this.Action.String(), "Action", "Action", 1) + `,`,
		`DeprecatedTimeoutNs:` + fmt.Sprintf("%v", this.DeprecatedTimeoutNs) + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`TimeoutMs:` + fmt.Sprintf("%v", this.TimeoutMs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmitProgressAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmitProgressAction{`,
		`Action:` + strings.Replace(this.Action.String(), "Action", "Action", 1) + `,`,
		`StartMessage:` + fmt.Sprintf("%v", this.StartMessage) + `,`,
		`SuccessMessage:` + fmt.Sprintf("%v", this.SuccessMessage) + `,`,
		`FailureMessagePrefix:` + fmt.Sprintf("%v", this.FailureMessagePrefix) + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TryAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TryAction{`,
		`Action:` + strings.Replace(this.Action.String(), "Action", "Action", 1) + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ParallelAction) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForActions := "[]*Action{"
	for _, f := range this.Actions {
		repeatedStringForActions += strings.Replace(f.String(), "Action", "Action", 1) + ","
	}
	repeatedStringForActions += "}"
	s := strings.Join([]string{`&ParallelAction{`,
		`Actions:` + repeatedStringForActions + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerialAction) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForActions := "[]*Action{"
	for _, f := range this.Actions {
		repeatedStringForActions += strings.Replace(f.String(), "Action", "Action", 1) + ","
	}
	repeatedStringForActions += "}"
	s := strings.Join([]string{`&SerialAction{`,
		`Actions:` + repeatedStringForActions + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CodependentAction) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForActions := "[]*Action{"
	for _, f := range this.Actions {
		repeatedStringForActions += strings.Replace(f.String(), "Action", "Action", 1) + ","
	}
	repeatedStringForActions += "}"
	s := strings.Join([]string{`&CodependentAction{`,
		`Actions:` + repeatedStringForActions + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceLimits) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceLimits{`,
		`OptionalNofile:` + fmt.Sprintf("%v", this.OptionalNofile) + `,`,
		`OptionalNproc:` + fmt.Sprintf("%v", this.OptionalNproc) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceLimits_Nofile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceLimits_Nofile{`,
		`Nofile:` + fmt.Sprintf("%v", this.Nofile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceLimits_Nproc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceLimits_Nproc{`,
		`Nproc:` + fmt.Sprintf("%v", this.Nproc) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringActions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownloadAction == nil {
				m.DownloadAction = &DownloadAction{}
			}
			if err := m.DownloadAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadAction == nil {
				m.UploadAction = &UploadAction{}
			}
			if err := m.UploadAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RunAction == nil {
				m.RunAction = &RunAction{}
			}
			if err := m.RunAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeoutAction == nil {
				m.TimeoutAction = &TimeoutAction{}
			}
			if err := m.TimeoutAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmitProgressAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmitProgressAction == nil {
				m.EmitProgressAction = &EmitProgressAction{}
			}
			if err := m.EmitProgressAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TryAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TryAction == nil {
				m.TryAction = &TryAction{}
			}
			if err := m.TryAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParallelAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParallelAction == nil {
				m.ParallelAction = &ParallelAction{}
			}
			if err := m.ParallelAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SerialAction == nil {
				m.SerialAction = &SerialAction{}
			}
			if err := m.SerialAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodependentAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CodependentAction == nil {
				m.CodependentAction = &CodependentAction{}
			}
			if err := m.CodependentAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artifact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Artifact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChecksumAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChecksumValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artifact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Artifact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = append(m.Env, &EnvironmentVariable{})
			if err := m.Env[len(m.Env)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceLimits == nil {
				m.ResourceLimits = &ResourceLimits{}
			}
			if err := m.ResourceLimits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuppressLogOutput", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SuppressLogOutput = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeoutAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeoutAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeoutAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &Action{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedTimeoutNs", wireType)
			}
			m.DeprecatedTimeoutNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeprecatedTimeoutNs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutMs", wireType)
			}
			m.TimeoutMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmitProgressAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmitProgressAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmitProgressAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &Action{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureMessagePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureMessagePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TryAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TryAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TryAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &Action{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParallelAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParallelAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParallelAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerialAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerialAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerialAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodependentAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodependentAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodependentAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceLimits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceLimits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceLimits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nofile", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptionalNofile = &ResourceLimits_Nofile{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nproc", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptionalNproc = &ResourceLimits_Nproc{v}
		default:
			iNdEx = preIndex
			skippy, err := skipActions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActions = fmt.Errorf("proto: unexpected end of group")
)
