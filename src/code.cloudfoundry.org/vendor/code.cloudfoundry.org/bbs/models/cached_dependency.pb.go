// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cached_dependency.proto

package models

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CachedDependency struct {
	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	From              string `protobuf:"bytes,2,opt,name=from,proto3" json:"from"`
	To                string `protobuf:"bytes,3,opt,name=to,proto3" json:"to"`
	CacheKey          string `protobuf:"bytes,4,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key"`
	LogSource         string `protobuf:"bytes,5,opt,name=log_source,json=logSource,proto3" json:"log_source"`
	ChecksumAlgorithm string `protobuf:"bytes,6,opt,name=checksum_algorithm,json=checksumAlgorithm,proto3" json:"checksum_algorithm,omitempty"`
	ChecksumValue     string `protobuf:"bytes,7,opt,name=checksum_value,json=checksumValue,proto3" json:"checksum_value,omitempty"`
}

func (m *CachedDependency) Reset()      { *m = CachedDependency{} }
func (*CachedDependency) ProtoMessage() {}
func (*CachedDependency) Descriptor() ([]byte, []int) {
	return fileDescriptor_936e0e6e1c3697fa, []int{0}
}
func (m *CachedDependency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CachedDependency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CachedDependency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CachedDependency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CachedDependency.Merge(m, src)
}
func (m *CachedDependency) XXX_Size() int {
	return m.Size()
}
func (m *CachedDependency) XXX_DiscardUnknown() {
	xxx_messageInfo_CachedDependency.DiscardUnknown(m)
}

var xxx_messageInfo_CachedDependency proto.InternalMessageInfo

func (m *CachedDependency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CachedDependency) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CachedDependency) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *CachedDependency) GetCacheKey() string {
	if m != nil {
		return m.CacheKey
	}
	return ""
}

func (m *CachedDependency) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

func (m *CachedDependency) GetChecksumAlgorithm() string {
	if m != nil {
		return m.ChecksumAlgorithm
	}
	return ""
}

func (m *CachedDependency) GetChecksumValue() string {
	if m != nil {
		return m.ChecksumValue
	}
	return ""
}

func init() {
	proto.RegisterType((*CachedDependency)(nil), "models.CachedDependency")
}

func init() { proto.RegisterFile("cached_dependency.proto", fileDescriptor_936e0e6e1c3697fa) }

var fileDescriptor_936e0e6e1c3697fa = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x33, 0xb9, 0xbd, 0xb9, 0xed, 0x40, 0xcb, 0xbd, 0xb3, 0xb8, 0x0e, 0x22, 0x27, 0x22,
	0x08, 0x22, 0xb4, 0x5d, 0xe8, 0x0b, 0x58, 0xdd, 0xb9, 0x8b, 0xe0, 0x36, 0xa4, 0x93, 0x69, 0x52,
	0x9a, 0xf4, 0x94, 0x34, 0x11, 0xba, 0xf3, 0x11, 0xdc, 0xf9, 0x0a, 0x3e, 0x8a, 0xcb, 0x2e, 0xbb,
	0x0a, 0x76, 0xba, 0x91, 0xac, 0xfa, 0x08, 0x92, 0x23, 0x6d, 0xdd, 0x1c, 0xfe, 0xff, 0xff, 0xfe,
	0x73, 0x18, 0x86, 0x1f, 0xa9, 0x40, 0xc5, 0x3a, 0xf4, 0x43, 0x3d, 0xd3, 0xd3, 0x50, 0x4f, 0xd5,
	0xa2, 0x37, 0xcb, 0x30, 0x47, 0xe1, 0xa4, 0x18, 0xea, 0x64, 0x7e, 0xdc, 0x8d, 0xc6, 0x79, 0x5c,
	0x0c, 0x7b, 0x0a, 0xd3, 0x7e, 0x84, 0x11, 0xf6, 0x09, 0x0f, 0x8b, 0x11, 0x39, 0x32, 0xa4, 0xbe,
	0xd7, 0xce, 0x5e, 0x6d, 0xfe, 0xf7, 0x96, 0x4e, 0xde, 0xed, 0x2f, 0x8a, 0x13, 0xde, 0x98, 0x06,
	0xa9, 0x96, 0xec, 0x94, 0x5d, 0xb4, 0x06, 0xcd, 0xaa, 0x74, 0xc9, 0x7b, 0x34, 0x6b, 0x3a, 0xca,
	0x30, 0x95, 0xf6, 0x81, 0xd6, 0xde, 0xa3, 0x29, 0xfe, 0x73, 0x3b, 0x47, 0xf9, 0x8b, 0x98, 0x53,
	0x95, 0xae, 0x9d, 0xa3, 0x67, 0xe7, 0x28, 0x2e, 0x79, 0x8b, 0x9e, 0xee, 0x4f, 0xf4, 0x42, 0x36,
	0x08, 0xb7, 0xab, 0xd2, 0x3d, 0x84, 0x5e, 0x93, 0xe4, 0xbd, 0x5e, 0x88, 0x2e, 0xe7, 0x09, 0x46,
	0xfe, 0x1c, 0x8b, 0x4c, 0x69, 0xf9, 0x9b, 0xca, 0x9d, 0xaa, 0x74, 0x7f, 0xa4, 0x5e, 0x2b, 0xc1,
	0xe8, 0x81, 0xa4, 0xe8, 0x72, 0xa1, 0x62, 0xad, 0x26, 0xf3, 0x22, 0xf5, 0x83, 0x24, 0xc2, 0x6c,
	0x9c, 0xc7, 0xa9, 0x74, 0xea, 0x35, 0xef, 0xdf, 0x8e, 0xdc, 0xec, 0x80, 0x38, 0xe7, 0x9d, 0x7d,
	0xfd, 0x29, 0x48, 0x0a, 0x2d, 0xff, 0x50, 0xb5, 0xbd, 0x4b, 0x1f, 0xeb, 0x70, 0x70, 0xbd, 0x5c,
	0x03, 0x5b, 0xad, 0xc1, 0xda, 0xae, 0x81, 0x3d, 0x1b, 0x60, 0x6f, 0x06, 0xd8, 0xbb, 0x01, 0xb6,
	0x34, 0xc0, 0x3e, 0x0c, 0xb0, 0x4f, 0x03, 0xd6, 0xd6, 0x00, 0x7b, 0xd9, 0x80, 0xb5, 0xdc, 0x80,
	0xb5, 0xda, 0x80, 0x35, 0x74, 0xe8, 0x5b, 0xaf, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x10, 0xce,
	0x51, 0x13, 0xa8, 0x01, 0x00, 0x00,
}

func (this *CachedDependency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CachedDependency)
	if !ok {
		that2, ok := that.(CachedDependency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.CacheKey != that1.CacheKey {
		return false
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	if this.ChecksumAlgorithm != that1.ChecksumAlgorithm {
		return false
	}
	if this.ChecksumValue != that1.ChecksumValue {
		return false
	}
	return true
}
func (this *CachedDependency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&models.CachedDependency{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "CacheKey: "+fmt.Sprintf("%#v", this.CacheKey)+",\n")
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "ChecksumAlgorithm: "+fmt.Sprintf("%#v", this.ChecksumAlgorithm)+",\n")
	s = append(s, "ChecksumValue: "+fmt.Sprintf("%#v", this.ChecksumValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCachedDependency(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CachedDependency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CachedDependency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CachedDependency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChecksumValue) > 0 {
		i -= len(m.ChecksumValue)
		copy(dAtA[i:], m.ChecksumValue)
		i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.ChecksumValue)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChecksumAlgorithm) > 0 {
		i -= len(m.ChecksumAlgorithm)
		copy(dAtA[i:], m.ChecksumAlgorithm)
		i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.ChecksumAlgorithm)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogSource) > 0 {
		i -= len(m.LogSource)
		copy(dAtA[i:], m.LogSource)
		i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.LogSource)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CacheKey) > 0 {
		i -= len(m.CacheKey)
		copy(dAtA[i:], m.CacheKey)
		i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.CacheKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCachedDependency(dAtA []byte, offset int, v uint64) int {
	offset -= sovCachedDependency(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CachedDependency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCachedDependency(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovCachedDependency(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovCachedDependency(uint64(l))
	}
	l = len(m.CacheKey)
	if l > 0 {
		n += 1 + l + sovCachedDependency(uint64(l))
	}
	l = len(m.LogSource)
	if l > 0 {
		n += 1 + l + sovCachedDependency(uint64(l))
	}
	l = len(m.ChecksumAlgorithm)
	if l > 0 {
		n += 1 + l + sovCachedDependency(uint64(l))
	}
	l = len(m.ChecksumValue)
	if l > 0 {
		n += 1 + l + sovCachedDependency(uint64(l))
	}
	return n
}

func sovCachedDependency(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCachedDependency(x uint64) (n int) {
	return sovCachedDependency(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CachedDependency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CachedDependency{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`CacheKey:` + fmt.Sprintf("%v", this.CacheKey) + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`ChecksumAlgorithm:` + fmt.Sprintf("%v", this.ChecksumAlgorithm) + `,`,
		`ChecksumValue:` + fmt.Sprintf("%v", this.ChecksumValue) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCachedDependency(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CachedDependency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCachedDependency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CachedDependency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CachedDependency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCachedDependency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCachedDependency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCachedDependency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCachedDependency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCachedDependency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCachedDependency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChecksumAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCachedDependency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChecksumValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCachedDependency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCachedDependency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCachedDependency(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCachedDependency
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCachedDependency
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCachedDependency
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCachedDependency
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCachedDependency        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCachedDependency          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCachedDependency = fmt.Errorf("proto: unexpected end of group")
)
