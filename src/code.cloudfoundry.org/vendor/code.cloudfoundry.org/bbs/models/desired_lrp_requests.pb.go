// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desired_lrp_requests.proto

package models

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DesiredLRPLifecycleResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *DesiredLRPLifecycleResponse) Reset()      { *m = DesiredLRPLifecycleResponse{} }
func (*DesiredLRPLifecycleResponse) ProtoMessage() {}
func (*DesiredLRPLifecycleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7235cc1a84e38c85, []int{0}
}
func (m *DesiredLRPLifecycleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DesiredLRPLifecycleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DesiredLRPLifecycleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DesiredLRPLifecycleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DesiredLRPLifecycleResponse.Merge(m, src)
}
func (m *DesiredLRPLifecycleResponse) XXX_Size() int {
	return m.Size()
}
func (m *DesiredLRPLifecycleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DesiredLRPLifecycleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DesiredLRPLifecycleResponse proto.InternalMessageInfo

func (m *DesiredLRPLifecycleResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type DesiredLRPsResponse struct {
	Error       *Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	DesiredLrps []*DesiredLRP `protobuf:"bytes,2,rep,name=desired_lrps,json=desiredLrps,proto3" json:"desired_lrps,omitempty"`
}

func (m *DesiredLRPsResponse) Reset()      { *m = DesiredLRPsResponse{} }
func (*DesiredLRPsResponse) ProtoMessage() {}
func (*DesiredLRPsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7235cc1a84e38c85, []int{1}
}
func (m *DesiredLRPsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DesiredLRPsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DesiredLRPsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DesiredLRPsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DesiredLRPsResponse.Merge(m, src)
}
func (m *DesiredLRPsResponse) XXX_Size() int {
	return m.Size()
}
func (m *DesiredLRPsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DesiredLRPsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DesiredLRPsResponse proto.InternalMessageInfo

func (m *DesiredLRPsResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *DesiredLRPsResponse) GetDesiredLrps() []*DesiredLRP {
	if m != nil {
		return m.DesiredLrps
	}
	return nil
}

type DesiredLRPsRequest struct {
	Domain       string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain"`
	ProcessGuids []string `protobuf:"bytes,2,rep,name=process_guids,json=processGuids,proto3" json:"process_guids,omitempty"`
}

func (m *DesiredLRPsRequest) Reset()      { *m = DesiredLRPsRequest{} }
func (*DesiredLRPsRequest) ProtoMessage() {}
func (*DesiredLRPsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7235cc1a84e38c85, []int{2}
}
func (m *DesiredLRPsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DesiredLRPsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DesiredLRPsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DesiredLRPsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DesiredLRPsRequest.Merge(m, src)
}
func (m *DesiredLRPsRequest) XXX_Size() int {
	return m.Size()
}
func (m *DesiredLRPsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DesiredLRPsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DesiredLRPsRequest proto.InternalMessageInfo

func (m *DesiredLRPsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DesiredLRPsRequest) GetProcessGuids() []string {
	if m != nil {
		return m.ProcessGuids
	}
	return nil
}

type DesiredLRPResponse struct {
	Error      *Error      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	DesiredLrp *DesiredLRP `protobuf:"bytes,2,opt,name=desired_lrp,json=desiredLrp,proto3" json:"desired_lrp,omitempty"`
}

func (m *DesiredLRPResponse) Reset()      { *m = DesiredLRPResponse{} }
func (*DesiredLRPResponse) ProtoMessage() {}
func (*DesiredLRPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7235cc1a84e38c85, []int{3}
}
func (m *DesiredLRPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DesiredLRPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DesiredLRPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DesiredLRPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DesiredLRPResponse.Merge(m, src)
}
func (m *DesiredLRPResponse) XXX_Size() int {
	return m.Size()
}
func (m *DesiredLRPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DesiredLRPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DesiredLRPResponse proto.InternalMessageInfo

func (m *DesiredLRPResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *DesiredLRPResponse) GetDesiredLrp() *DesiredLRP {
	if m != nil {
		return m.DesiredLrp
	}
	return nil
}

type DesiredLRPSchedulingInfosResponse struct {
	Error                     *Error                      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	DesiredLrpSchedulingInfos []*DesiredLRPSchedulingInfo `protobuf:"bytes,2,rep,name=desired_lrp_scheduling_infos,json=desiredLrpSchedulingInfos,proto3" json:"desired_lrp_scheduling_infos,omitempty"`
}

func (m *DesiredLRPSchedulingInfosResponse) Reset()      { *m = DesiredLRPSchedulingInfosResponse{} }
func (*DesiredLRPSchedulingInfosResponse) ProtoMessage() {}
func (*DesiredLRPSchedulingInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7235cc1a84e38c85, []int{4}
}
func (m *DesiredLRPSchedulingInfosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DesiredLRPSchedulingInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DesiredLRPSchedulingInfosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DesiredLRPSchedulingInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DesiredLRPSchedulingInfosResponse.Merge(m, src)
}
func (m *DesiredLRPSchedulingInfosResponse) XXX_Size() int {
	return m.Size()
}
func (m *DesiredLRPSchedulingInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DesiredLRPSchedulingInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DesiredLRPSchedulingInfosResponse proto.InternalMessageInfo

func (m *DesiredLRPSchedulingInfosResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *DesiredLRPSchedulingInfosResponse) GetDesiredLrpSchedulingInfos() []*DesiredLRPSchedulingInfo {
	if m != nil {
		return m.DesiredLrpSchedulingInfos
	}
	return nil
}

type DesiredLRPByProcessGuidRequest struct {
	ProcessGuid string `protobuf:"bytes,1,opt,name=process_guid,json=processGuid,proto3" json:"process_guid"`
}

func (m *DesiredLRPByProcessGuidRequest) Reset()      { *m = DesiredLRPByProcessGuidRequest{} }
func (*DesiredLRPByProcessGuidRequest) ProtoMessage() {}
func (*DesiredLRPByProcessGuidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7235cc1a84e38c85, []int{5}
}
func (m *DesiredLRPByProcessGuidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DesiredLRPByProcessGuidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DesiredLRPByProcessGuidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DesiredLRPByProcessGuidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DesiredLRPByProcessGuidRequest.Merge(m, src)
}
func (m *DesiredLRPByProcessGuidRequest) XXX_Size() int {
	return m.Size()
}
func (m *DesiredLRPByProcessGuidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DesiredLRPByProcessGuidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DesiredLRPByProcessGuidRequest proto.InternalMessageInfo

func (m *DesiredLRPByProcessGuidRequest) GetProcessGuid() string {
	if m != nil {
		return m.ProcessGuid
	}
	return ""
}

type DesireLRPRequest struct {
	DesiredLrp *DesiredLRP `protobuf:"bytes,1,opt,name=desired_lrp,json=desiredLrp,proto3" json:"desired_lrp,omitempty"`
}

func (m *DesireLRPRequest) Reset()      { *m = DesireLRPRequest{} }
func (*DesireLRPRequest) ProtoMessage() {}
func (*DesireLRPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7235cc1a84e38c85, []int{6}
}
func (m *DesireLRPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DesireLRPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DesireLRPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DesireLRPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DesireLRPRequest.Merge(m, src)
}
func (m *DesireLRPRequest) XXX_Size() int {
	return m.Size()
}
func (m *DesireLRPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DesireLRPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DesireLRPRequest proto.InternalMessageInfo

func (m *DesireLRPRequest) GetDesiredLrp() *DesiredLRP {
	if m != nil {
		return m.DesiredLrp
	}
	return nil
}

type UpdateDesiredLRPRequest struct {
	ProcessGuid string            `protobuf:"bytes,1,opt,name=process_guid,json=processGuid,proto3" json:"process_guid"`
	Update      *DesiredLRPUpdate `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
}

func (m *UpdateDesiredLRPRequest) Reset()      { *m = UpdateDesiredLRPRequest{} }
func (*UpdateDesiredLRPRequest) ProtoMessage() {}
func (*UpdateDesiredLRPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7235cc1a84e38c85, []int{7}
}
func (m *UpdateDesiredLRPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDesiredLRPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDesiredLRPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDesiredLRPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDesiredLRPRequest.Merge(m, src)
}
func (m *UpdateDesiredLRPRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDesiredLRPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDesiredLRPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDesiredLRPRequest proto.InternalMessageInfo

func (m *UpdateDesiredLRPRequest) GetProcessGuid() string {
	if m != nil {
		return m.ProcessGuid
	}
	return ""
}

func (m *UpdateDesiredLRPRequest) GetUpdate() *DesiredLRPUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

type RemoveDesiredLRPRequest struct {
	ProcessGuid string `protobuf:"bytes,1,opt,name=process_guid,json=processGuid,proto3" json:"process_guid"`
}

func (m *RemoveDesiredLRPRequest) Reset()      { *m = RemoveDesiredLRPRequest{} }
func (*RemoveDesiredLRPRequest) ProtoMessage() {}
func (*RemoveDesiredLRPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7235cc1a84e38c85, []int{8}
}
func (m *RemoveDesiredLRPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveDesiredLRPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveDesiredLRPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveDesiredLRPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveDesiredLRPRequest.Merge(m, src)
}
func (m *RemoveDesiredLRPRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveDesiredLRPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveDesiredLRPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveDesiredLRPRequest proto.InternalMessageInfo

func (m *RemoveDesiredLRPRequest) GetProcessGuid() string {
	if m != nil {
		return m.ProcessGuid
	}
	return ""
}

func init() {
	proto.RegisterType((*DesiredLRPLifecycleResponse)(nil), "models.DesiredLRPLifecycleResponse")
	proto.RegisterType((*DesiredLRPsResponse)(nil), "models.DesiredLRPsResponse")
	proto.RegisterType((*DesiredLRPsRequest)(nil), "models.DesiredLRPsRequest")
	proto.RegisterType((*DesiredLRPResponse)(nil), "models.DesiredLRPResponse")
	proto.RegisterType((*DesiredLRPSchedulingInfosResponse)(nil), "models.DesiredLRPSchedulingInfosResponse")
	proto.RegisterType((*DesiredLRPByProcessGuidRequest)(nil), "models.DesiredLRPByProcessGuidRequest")
	proto.RegisterType((*DesireLRPRequest)(nil), "models.DesireLRPRequest")
	proto.RegisterType((*UpdateDesiredLRPRequest)(nil), "models.UpdateDesiredLRPRequest")
	proto.RegisterType((*RemoveDesiredLRPRequest)(nil), "models.RemoveDesiredLRPRequest")
}

func init() { proto.RegisterFile("desired_lrp_requests.proto", fileDescriptor_7235cc1a84e38c85) }

var fileDescriptor_7235cc1a84e38c85 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0x8e, 0x87, 0xa8, 0xb4, 0x3f, 0x9d, 0x34, 0xcc, 0x61, 0xa5, 0x20, 0xaf, 0x78, 0x97, 0x5d,
	0xe8, 0xd0, 0x0a, 0x2f, 0x50, 0x81, 0x26, 0xa4, 0x0a, 0x4d, 0x46, 0x3b, 0xa2, 0xaa, 0x4d, 0xdc,
	0x2c, 0x52, 0x12, 0x67, 0x76, 0x82, 0xb4, 0xdb, 0x1e, 0x81, 0xc7, 0x40, 0xe2, 0x45, 0x38, 0xf6,
	0xb8, 0xd3, 0x44, 0xd3, 0x0b, 0xda, 0x69, 0x8f, 0x80, 0x6a, 0xbb, 0xc4, 0x61, 0x1c, 0x28, 0xe2,
	0x94, 0xf8, 0xf3, 0xf7, 0x7f, 0xff, 0xf7, 0x7f, 0x7f, 0x02, 0xdd, 0x90, 0xab, 0x58, 0xf2, 0x70,
	0x9c, 0xc8, 0x7c, 0x2c, 0xf9, 0x45, 0xc9, 0x55, 0xa1, 0xfa, 0xb9, 0x14, 0x85, 0xc0, 0xad, 0x54,
	0x84, 0x3c, 0x51, 0xdd, 0x17, 0x51, 0x5c, 0x9c, 0x97, 0xd3, 0x7e, 0x20, 0xd2, 0xa3, 0x48, 0x44,
	0xe2, 0x48, 0x5f, 0x4f, 0xcb, 0x99, 0x3e, 0xe9, 0x83, 0x7e, 0x33, 0x65, 0xdd, 0x47, 0x8e, 0xa4,
	0x85, 0x7c, 0x2e, 0xa5, 0x90, 0xe6, 0x40, 0x87, 0xf0, 0xf4, 0x8d, 0x61, 0x8c, 0xd8, 0xe9, 0x28,
	0x9e, 0xf1, 0xe0, 0x32, 0x48, 0x38, 0xe3, 0x2a, 0x17, 0x99, 0xe2, 0xf8, 0x00, 0x1e, 0x6a, 0x76,
	0x07, 0xf5, 0xd0, 0xa1, 0x7f, 0xbc, 0xd3, 0x37, 0x2e, 0xfa, 0x6f, 0x57, 0x20, 0x33, 0x77, 0xf4,
	0x02, 0x1e, 0xd7, 0x1a, 0x6a, 0xa3, 0x5a, 0xfc, 0x1a, 0xda, 0x8e, 0x43, 0xd5, 0xd9, 0xea, 0x3d,
	0x38, 0xf4, 0x8f, 0xf1, 0x9a, 0x5b, 0xeb, 0x32, 0xdf, 0xf2, 0x46, 0x32, 0x57, 0xf4, 0x23, 0xe0,
	0x46, 0x4b, 0x1d, 0x15, 0xa6, 0xd0, 0x0a, 0x45, 0x3a, 0x89, 0x33, 0xdd, 0x72, 0x7b, 0x08, 0xb7,
	0x37, 0xfb, 0x16, 0x61, 0xf6, 0x89, 0x0f, 0x60, 0x27, 0x97, 0x22, 0xe0, 0x4a, 0x8d, 0xa3, 0x32,
	0x0e, 0x4d, 0xc7, 0x6d, 0xd6, 0xb6, 0xe0, 0xc9, 0x0a, 0xa3, 0x99, 0x2b, 0xbf, 0xd9, 0x40, 0x03,
	0xf0, 0x9d, 0x81, 0x3a, 0x5b, 0x9a, 0xfa, 0xa7, 0x79, 0xa0, 0x9e, 0x87, 0x7e, 0x45, 0xf0, 0xbc,
	0xbe, 0xfa, 0x10, 0x9c, 0xf3, 0xb0, 0x4c, 0xe2, 0x2c, 0x7a, 0x97, 0xcd, 0xc4, 0x86, 0x81, 0x4e,
	0xe0, 0x99, 0xfb, 0x15, 0xa9, 0x5f, 0x5a, 0xe3, 0x78, 0x25, 0x66, 0x03, 0xee, 0xdd, 0x37, 0xd4,
	0xec, 0xca, 0x9e, 0xd4, 0xf6, 0x7e, 0xf3, 0x43, 0xcf, 0x80, 0xd4, 0x65, 0xc3, 0xcb, 0xd3, 0x3a,
	0xb9, 0xf5, 0x22, 0x06, 0xd0, 0x76, 0x43, 0xb6, 0xeb, 0xd8, 0xbd, 0xbd, 0xd9, 0x6f, 0xe0, 0xcc,
	0x77, 0x52, 0xa7, 0x27, 0xb0, 0x6b, 0x64, 0x75, 0xe6, 0x6b, 0xa1, 0x46, 0x9a, 0xe8, 0xaf, 0xd2,
	0xbc, 0x42, 0xb0, 0x77, 0x96, 0x87, 0x93, 0x82, 0xbb, 0x4b, 0xfc, 0x77, 0x67, 0xf8, 0x25, 0xb4,
	0x4a, 0xad, 0x67, 0xd7, 0xd9, 0xb9, 0x6f, 0xc0, 0xf4, 0x63, 0x96, 0x47, 0xdf, 0xc3, 0x1e, 0xe3,
	0xa9, 0xf8, 0xf4, 0x9f, 0x1c, 0x0c, 0x5f, 0xcd, 0x17, 0xc4, 0xbb, 0x5e, 0x10, 0xef, 0x6e, 0x41,
	0xd0, 0x55, 0x45, 0xd0, 0x97, 0x8a, 0xa0, 0x6f, 0x15, 0x41, 0xf3, 0x8a, 0xa0, 0xef, 0x15, 0x41,
	0x3f, 0x2a, 0xe2, 0xdd, 0x55, 0x04, 0x7d, 0x5e, 0x12, 0x6f, 0xbe, 0x24, 0xde, 0xf5, 0x92, 0x78,
	0xd3, 0x96, 0xfe, 0xc7, 0x07, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xf1, 0x73, 0xee, 0x58,
	0x04, 0x00, 0x00,
}

func (this *DesiredLRPLifecycleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DesiredLRPLifecycleResponse)
	if !ok {
		that2, ok := that.(DesiredLRPLifecycleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *DesiredLRPsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DesiredLRPsResponse)
	if !ok {
		that2, ok := that.(DesiredLRPsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if len(this.DesiredLrps) != len(that1.DesiredLrps) {
		return false
	}
	for i := range this.DesiredLrps {
		if !this.DesiredLrps[i].Equal(that1.DesiredLrps[i]) {
			return false
		}
	}
	return true
}
func (this *DesiredLRPsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DesiredLRPsRequest)
	if !ok {
		that2, ok := that.(DesiredLRPsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if len(this.ProcessGuids) != len(that1.ProcessGuids) {
		return false
	}
	for i := range this.ProcessGuids {
		if this.ProcessGuids[i] != that1.ProcessGuids[i] {
			return false
		}
	}
	return true
}
func (this *DesiredLRPResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DesiredLRPResponse)
	if !ok {
		that2, ok := that.(DesiredLRPResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.DesiredLrp.Equal(that1.DesiredLrp) {
		return false
	}
	return true
}
func (this *DesiredLRPSchedulingInfosResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DesiredLRPSchedulingInfosResponse)
	if !ok {
		that2, ok := that.(DesiredLRPSchedulingInfosResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if len(this.DesiredLrpSchedulingInfos) != len(that1.DesiredLrpSchedulingInfos) {
		return false
	}
	for i := range this.DesiredLrpSchedulingInfos {
		if !this.DesiredLrpSchedulingInfos[i].Equal(that1.DesiredLrpSchedulingInfos[i]) {
			return false
		}
	}
	return true
}
func (this *DesiredLRPByProcessGuidRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DesiredLRPByProcessGuidRequest)
	if !ok {
		that2, ok := that.(DesiredLRPByProcessGuidRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProcessGuid != that1.ProcessGuid {
		return false
	}
	return true
}
func (this *DesireLRPRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DesireLRPRequest)
	if !ok {
		that2, ok := that.(DesireLRPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DesiredLrp.Equal(that1.DesiredLrp) {
		return false
	}
	return true
}
func (this *UpdateDesiredLRPRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDesiredLRPRequest)
	if !ok {
		that2, ok := that.(UpdateDesiredLRPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProcessGuid != that1.ProcessGuid {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	return true
}
func (this *RemoveDesiredLRPRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveDesiredLRPRequest)
	if !ok {
		that2, ok := that.(RemoveDesiredLRPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProcessGuid != that1.ProcessGuid {
		return false
	}
	return true
}
func (this *DesiredLRPLifecycleResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.DesiredLRPLifecycleResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.DesiredLRPsResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.DesiredLrps != nil {
		s = append(s, "DesiredLrps: "+fmt.Sprintf("%#v", this.DesiredLrps)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.DesiredLRPsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "ProcessGuids: "+fmt.Sprintf("%#v", this.ProcessGuids)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.DesiredLRPResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.DesiredLrp != nil {
		s = append(s, "DesiredLrp: "+fmt.Sprintf("%#v", this.DesiredLrp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPSchedulingInfosResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.DesiredLRPSchedulingInfosResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.DesiredLrpSchedulingInfos != nil {
		s = append(s, "DesiredLrpSchedulingInfos: "+fmt.Sprintf("%#v", this.DesiredLrpSchedulingInfos)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPByProcessGuidRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.DesiredLRPByProcessGuidRequest{")
	s = append(s, "ProcessGuid: "+fmt.Sprintf("%#v", this.ProcessGuid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesireLRPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.DesireLRPRequest{")
	if this.DesiredLrp != nil {
		s = append(s, "DesiredLrp: "+fmt.Sprintf("%#v", this.DesiredLrp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDesiredLRPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.UpdateDesiredLRPRequest{")
	s = append(s, "ProcessGuid: "+fmt.Sprintf("%#v", this.ProcessGuid)+",\n")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveDesiredLRPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.RemoveDesiredLRPRequest{")
	s = append(s, "ProcessGuid: "+fmt.Sprintf("%#v", this.ProcessGuid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDesiredLrpRequests(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DesiredLRPLifecycleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPLifecycleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DesiredLRPLifecycleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DesiredLRPsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DesiredLRPsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DesiredLrps) > 0 {
		for iNdEx := len(m.DesiredLrps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DesiredLrps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DesiredLRPsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DesiredLRPsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProcessGuids) > 0 {
		for iNdEx := len(m.ProcessGuids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProcessGuids[iNdEx])
			copy(dAtA[i:], m.ProcessGuids[iNdEx])
			i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(len(m.ProcessGuids[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DesiredLRPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DesiredLRPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DesiredLrp != nil {
		{
			size, err := m.DesiredLrp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DesiredLRPSchedulingInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPSchedulingInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DesiredLRPSchedulingInfosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DesiredLrpSchedulingInfos) > 0 {
		for iNdEx := len(m.DesiredLrpSchedulingInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DesiredLrpSchedulingInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DesiredLRPByProcessGuidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPByProcessGuidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DesiredLRPByProcessGuidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProcessGuid) > 0 {
		i -= len(m.ProcessGuid)
		copy(dAtA[i:], m.ProcessGuid)
		i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(len(m.ProcessGuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DesireLRPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesireLRPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DesireLRPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DesiredLrp != nil {
		{
			size, err := m.DesiredLrp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDesiredLRPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDesiredLRPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDesiredLRPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Update != nil {
		{
			size, err := m.Update.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProcessGuid) > 0 {
		i -= len(m.ProcessGuid)
		copy(dAtA[i:], m.ProcessGuid)
		i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(len(m.ProcessGuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveDesiredLRPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveDesiredLRPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveDesiredLRPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProcessGuid) > 0 {
		i -= len(m.ProcessGuid)
		copy(dAtA[i:], m.ProcessGuid)
		i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(len(m.ProcessGuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDesiredLrpRequests(dAtA []byte, offset int, v uint64) int {
	offset -= sovDesiredLrpRequests(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DesiredLRPLifecycleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	return n
}

func (m *DesiredLRPsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	if len(m.DesiredLrps) > 0 {
		for _, e := range m.DesiredLrps {
			l = e.Size()
			n += 1 + l + sovDesiredLrpRequests(uint64(l))
		}
	}
	return n
}

func (m *DesiredLRPsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	if len(m.ProcessGuids) > 0 {
		for _, s := range m.ProcessGuids {
			l = len(s)
			n += 1 + l + sovDesiredLrpRequests(uint64(l))
		}
	}
	return n
}

func (m *DesiredLRPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	if m.DesiredLrp != nil {
		l = m.DesiredLrp.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	return n
}

func (m *DesiredLRPSchedulingInfosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	if len(m.DesiredLrpSchedulingInfos) > 0 {
		for _, e := range m.DesiredLrpSchedulingInfos {
			l = e.Size()
			n += 1 + l + sovDesiredLrpRequests(uint64(l))
		}
	}
	return n
}

func (m *DesiredLRPByProcessGuidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProcessGuid)
	if l > 0 {
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	return n
}

func (m *DesireLRPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DesiredLrp != nil {
		l = m.DesiredLrp.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	return n
}

func (m *UpdateDesiredLRPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProcessGuid)
	if l > 0 {
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	return n
}

func (m *RemoveDesiredLRPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProcessGuid)
	if l > 0 {
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	return n
}

func sovDesiredLrpRequests(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDesiredLrpRequests(x uint64) (n int) {
	return sovDesiredLrpRequests(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DesiredLRPLifecycleResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPLifecycleResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDesiredLrps := "[]*DesiredLRP{"
	for _, f := range this.DesiredLrps {
		repeatedStringForDesiredLrps += strings.Replace(fmt.Sprintf("%v", f), "DesiredLRP", "DesiredLRP", 1) + ","
	}
	repeatedStringForDesiredLrps += "}"
	s := strings.Join([]string{`&DesiredLRPsResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`DesiredLrps:` + repeatedStringForDesiredLrps + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`ProcessGuids:` + fmt.Sprintf("%v", this.ProcessGuids) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`DesiredLrp:` + strings.Replace(fmt.Sprintf("%v", this.DesiredLrp), "DesiredLRP", "DesiredLRP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPSchedulingInfosResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDesiredLrpSchedulingInfos := "[]*DesiredLRPSchedulingInfo{"
	for _, f := range this.DesiredLrpSchedulingInfos {
		repeatedStringForDesiredLrpSchedulingInfos += strings.Replace(fmt.Sprintf("%v", f), "DesiredLRPSchedulingInfo", "DesiredLRPSchedulingInfo", 1) + ","
	}
	repeatedStringForDesiredLrpSchedulingInfos += "}"
	s := strings.Join([]string{`&DesiredLRPSchedulingInfosResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`DesiredLrpSchedulingInfos:` + repeatedStringForDesiredLrpSchedulingInfos + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPByProcessGuidRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPByProcessGuidRequest{`,
		`ProcessGuid:` + fmt.Sprintf("%v", this.ProcessGuid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesireLRPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesireLRPRequest{`,
		`DesiredLrp:` + strings.Replace(fmt.Sprintf("%v", this.DesiredLrp), "DesiredLRP", "DesiredLRP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDesiredLRPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateDesiredLRPRequest{`,
		`ProcessGuid:` + fmt.Sprintf("%v", this.ProcessGuid) + `,`,
		`Update:` + strings.Replace(fmt.Sprintf("%v", this.Update), "DesiredLRPUpdate", "DesiredLRPUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveDesiredLRPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveDesiredLRPRequest{`,
		`ProcessGuid:` + fmt.Sprintf("%v", this.ProcessGuid) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDesiredLrpRequests(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DesiredLRPLifecycleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPLifecycleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPLifecycleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredLrps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredLrps = append(m.DesiredLrps, &DesiredLRP{})
			if err := m.DesiredLrps[len(m.DesiredLrps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessGuids = append(m.ProcessGuids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredLrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DesiredLrp == nil {
				m.DesiredLrp = &DesiredLRP{}
			}
			if err := m.DesiredLrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPSchedulingInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPSchedulingInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPSchedulingInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredLrpSchedulingInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredLrpSchedulingInfos = append(m.DesiredLrpSchedulingInfos, &DesiredLRPSchedulingInfo{})
			if err := m.DesiredLrpSchedulingInfos[len(m.DesiredLrpSchedulingInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPByProcessGuidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPByProcessGuidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPByProcessGuidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesireLRPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesireLRPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesireLRPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredLrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DesiredLrp == nil {
				m.DesiredLrp = &DesiredLRP{}
			}
			if err := m.DesiredLrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDesiredLRPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDesiredLRPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDesiredLRPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &DesiredLRPUpdate{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveDesiredLRPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveDesiredLRPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveDesiredLRPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDesiredLrpRequests(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDesiredLrpRequests
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDesiredLrpRequests
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDesiredLrpRequests
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDesiredLrpRequests        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDesiredLrpRequests          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDesiredLrpRequests = fmt.Errorf("proto: unexpected end of group")
)
