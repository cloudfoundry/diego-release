// This file was generated by counterfeiter
// with command: counterfeiter -p -o /Users/pivotal/workspace/local-volume-release/src/code.cloudfoundry.org/goshims/filepathshim path/filepath
package filepathshim

import "path/filepath"

type FilepathShim struct{}

func (sh *FilepathShim) Match(pattern string, name string) (matched bool, err error) {
	return filepath.Match(pattern, name)
}

func (sh *FilepathShim) Glob(pattern string) (matches []string, err error) {
	return filepath.Glob(pattern)
}

func (sh *FilepathShim) Clean(path string) string {
	return filepath.Clean(path)
}

func (sh *FilepathShim) ToSlash(path string) string {
	return filepath.ToSlash(path)
}

func (sh *FilepathShim) FromSlash(path string) string {
	return filepath.FromSlash(path)
}

func (sh *FilepathShim) SplitList(path string) []string {
	return filepath.SplitList(path)
}

func (sh *FilepathShim) Split(path string) (dir, file string) {
	return filepath.Split(path)
}

func (sh *FilepathShim) Join(elem ...string) string {
	return filepath.Join(elem...)
}

func (sh *FilepathShim) Ext(path string) string {
	return filepath.Ext(path)
}

func (sh *FilepathShim) EvalSymlinks(path string) (string, error) {
	return filepath.EvalSymlinks(path)
}

func (sh *FilepathShim) Abs(path string) (string, error) {
	return filepath.Abs(path)
}

func (sh *FilepathShim) Rel(basepath string, targpath string) (string, error) {
	return filepath.Rel(basepath, targpath)
}

func (sh *FilepathShim) Walk(root string, walkFn filepath.WalkFunc) error {
	return filepath.Walk(root, walkFn)
}

func (sh *FilepathShim) Base(path string) string {
	return filepath.Base(path)
}

func (sh *FilepathShim) Dir(path string) string {
	return filepath.Dir(path)
}

func (sh *FilepathShim) VolumeName(path string) string {
	return filepath.VolumeName(path)
}

func (sh *FilepathShim) IsAbs(path string) bool {
	return filepath.IsAbs(path)
}

func (sh *FilepathShim) HasPrefix(p string, prefix string) bool {
	return filepath.HasPrefix(p, prefix)
}
