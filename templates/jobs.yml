meta: (( merge ))

networks: (( merge ))

releases:
  - name: diego
    version: latest
  - name: cf
    version: latest

external_services: (( merge ))

jobs:
  - name: consul_z1
    release: diego
    templates:
      - name: consul-agent
    instances: 1
    resource_pool: medium_z1
    networks:
      - name: diego1
        static_ips: (( merge ))
    update:
      serial: true
    properties:
      network_name: diego1
      consul:
        agent:
          mode: server
          servers: {lan: (( .properties.diego.consul_server.machines ))}

  - name: consul_z2
    release: diego
    templates:
      - name: consul-agent
    instances: 1
    resource_pool: medium_z2
    networks:
      - name: diego2
        static_ips: (( merge ))
    update:
      serial: true
    properties:
      network_name: diego2
      consul:
        agent:
          mode: server
          servers: {lan: (( .properties.diego.consul_server.machines ))}

  - name: consul_z3
    release: diego
    templates:
      - name: consul-agent
    instances: 1
    resource_pool: medium_z3
    networks:
      - name: diego3
        static_ips: (( merge ))
    update:
      serial: true
    properties:
      network_name: diego3
      consul:
        agent:
          mode: server
          servers: {lan: (( .properties.diego.consul_server.machines ))}

  - name: brain_z1
    release: diego
    templates:
      - name: consul-agent
      - name: auctioneer
      - name: converger
      - name: runtime_metrics_server
      - name: metron_agent
        release: cf
    instances: 1
    resource_pool: large_z1
    networks:
      - name: diego1
    properties:
      network_name: diego1
      networks:
        apps: diego1
      loggregator_endpoint:
        shared_secret: (( external_services.loggregator_endpoint.z1.shared_secret ))
      metron_agent:
        zone: z1
      consul:
        agent:
          servers: {lan: (( .properties.diego.consul_server.machines ))}

  - name: brain_z2
    release: diego
    templates:
      - name: consul-agent
      - name: auctioneer
      - name: converger
      - name: runtime_metrics_server
      - name: metron_agent
        release: cf
    instances: 1
    resource_pool: large_z2
    networks:
      - name: diego2
    properties:
      network_name: diego2
      networks:
        apps: diego2
      loggregator_endpoint:
        shared_secret: (( external_services.loggregator_endpoint.z2.shared_secret ))
      metron_agent:
        zone: z2
      consul:
        agent:
          servers: {lan: (( .properties.diego.consul_server.machines ))}

  - name: cell_z1
    release: diego
    templates:
      - name: consul-agent
      - name: executor
      - name: garden-linux
      - name: receptor
      - name: rep
      - name: metron_agent
        release: cf
    instances: 1
    resource_pool: large_z1
    networks:
      - name: diego1
    properties:
      network_name: diego1
      networks:
        apps: diego1
      loggregator_endpoint:
        shared_secret: (( external_services.loggregator_endpoint.z1.shared_secret ))
      metron_agent:
        zone: z1
      consul:
        agent:
          services: [receptor]
          servers: {lan: (( .properties.diego.consul_server.machines ))}

  - name: cell_z2
    release: diego
    templates:
      - name: consul-agent
      - name: executor
      - name: garden-linux
      - name: receptor
      - name: rep
      - name: metron_agent
        release: cf
    instances: 1
    resource_pool: large_z2
    networks:
      - name: diego2
    properties:
      network_name: diego2
      networks:
        apps: diego2
      loggregator_endpoint:
        shared_secret: (( external_services.loggregator_endpoint.z2.shared_secret ))
      metron_agent:
        zone: z2
      consul:
        agent:
          services: [receptor]
          servers: {lan: (( .properties.diego.consul_server.machines ))}

  - name: file_server_z1
    release: diego
    templates:
      - name: file_server
      - name: consul-agent
      - name: metron_agent
        release: cf
    instances: 1
    resource_pool: file_server_z1
    networks:
      - name: diego1
    properties:
      networks:
        apps: diego1
      loggregator_endpoint:
        shared_secret: (( external_services.loggregator_endpoint.z1.shared_secret ))
      metron_agent:
        zone: z1
      consul:
        agent:
          services: [file_server]
          servers: {lan: (( .properties.diego.consul_server.machines ))}

  - name: file_server_z2
    release: diego
    templates:
      - name: file_server
      - name: consul-agent
      - name: metron_agent
        release: cf
    instances: 1
    resource_pool: file_server_z2
    networks:
      - name: diego2
    properties:
      networks:
        apps: diego2
      loggregator_endpoint:
        shared_secret: (( external_services.loggregator_endpoint.z2.shared_secret ))
      metron_agent:
        zone: z2
      consul:
        agent:
          services: [file_server]
          servers: {lan: (( .properties.diego.consul_server.machines ))}

  - name: cc_bridge_z1
    release: diego
    templates:
      - name: stager
      - name: nsync
      - name: tps
      - name: consul-agent
      - name: metron_agent
        release: cf
    instances: 1
    resource_pool: small_z1
    networks:
      - name: diego1
    properties:
      networks:
        apps: diego1
      network_name: diego1
      loggregator_endpoint:
        shared_secret: (( external_services.loggregator_endpoint.z1.shared_secret ))
      metron_agent:
        zone: z1
      consul:
        agent:
          services: [stager]
          servers: {lan: (( .properties.diego.consul_server.machines ))}

  - name: cc_bridge_z2
    release: diego
    templates:
      - name: stager
      - name: nsync
      - name: tps
      - name: consul-agent
      - name: metron_agent
        release: cf
    instances: 1
    resource_pool: small_z2
    networks:
      - name: diego2
    properties:
      networks:
        apps: diego2
      network_name: diego2
      nats: (( external_services.nats ))
      loggregator_endpoint:
        shared_secret: (( external_services.loggregator_endpoint.z2.shared_secret ))
      metron_agent:
        zone: z2
      consul:
        agent:
          services: [stager]
          servers: {lan: (( .properties.diego.consul_server.machines ))}

  - name: route_emitter_z1
    release: diego
    templates:
      - name: route_emitter
      - name: metron_agent
        release: cf
    instances: 1
    resource_pool: small_z1
    networks:
      - name: diego1
    properties:
      networks:
        apps: diego1
      loggregator_endpoint:
        shared_secret: (( external_services.loggregator_endpoint.z1.shared_secret ))
      metron_agent:
        zone: z1

  - name: route_emitter_z2
    release: diego
    templates:
      - name: route_emitter
      - name: metron_agent
        release: cf
    instances: 1
    resource_pool: small_z2
    networks:
      - name: diego2
    properties:
      networks:
        apps: diego2
      loggregator_endpoint:
        shared_secret: (( external_services.loggregator_endpoint.z2.shared_secret ))
      metron_agent:
        zone: z2

  - name: etcd_z1
    release: diego
    templates:
      - name: etcd
      - name: etcd_metrics_server
    instances: 1
    resource_pool: medium_z1
    networks:
      - name: diego1
        static_ips: (( merge ))
    properties:
      network_name: diego1
    update:
      serial: true

  - name: etcd_z2
    release: diego
    templates:
      - name: etcd
      - name: etcd_metrics_server
    instances: 0
    resource_pool: medium_z2
    networks:
      - name: diego2
        static_ips: []
    properties:
      network_name: diego2
    update:
      serial: true

  - name: etcd_z3
    release: diego
    templates:
      - name: etcd
      - name: etcd_metrics_server
    instances: 0
    resource_pool: medium_z3
    networks:
      - name: diego3
        static_ips: []
    properties:
      network_name: diego3
    update:
      serial: true

properties:
  # -- Properties below are used by jobs from cf-release --
  nats: # For metron_agent to talk to collector
    machines: (( external_services.nats.machines ))
    user: (( external_services.nats.user ))
    password: (( external_services.nats.password ))
    port: (( external_services.nats.port ))
  etcd: # For metron_agent to find loggregator
    machines: (( external_services.cf_etcd.machines ))
  syslog_daemon_config: ~

  diego:
    # -- Global properties --
    api_url: (( "http://" receptor.username ":" receptor.password "@receptor.service.dc1.consul:8888" ))

    etcd:
      machines: (( jobs.etcd_z1.networks.diego1.static_ips jobs.etcd_z2.networks.diego2.static_ips jobs.etcd_z3.networks.diego3.static_ips ))
    consul_server:
      machines: (( jobs.consul_z1.networks.diego1.static_ips jobs.consul_z2.networks.diego2.static_ips jobs.consul_z3.networks.diego3.static_ips ))
    nats: (( external_services.nats ))
    ssl:
      skip_cert_verify: false

    # -- Job specific properties --
    auctioneer:
      etcd:
        machines: (( .properties.diego.etcd.machines ))

    converger:
      etcd:
        machines: (( .properties.diego.etcd.machines ))

    etcd_metrics_server:
      job_name: "etcd-diego"
      nats:
        machines: (( external_services.nats.machines ))
        username: (( external_services.nats.user ))
        password: (( external_services.nats.password ))
        port: (( external_services.nats.port ))

    executor:
      drain_timeout: ~
      garden: ~

    file_server:
      cc:
        srv_api_uri: (( external_services.cc.srv_api_uri ))
        staging_upload_user: (( external_services.cc.staging_upload_user ))
        staging_upload_password: (( external_services.cc.staging_upload_password ))

    nsync:
      diego_api_url: (( .properties.diego.api_url ))
      cc:
        base_url: (( external_services.cc.srv_api_uri ))
        basic_auth_password: (( external_services.cc.internal_api_password ))
      etcd:
        machines: (( .properties.diego.etcd.machines ))
      lifecycle_bundles: ~
      nats:
        machines: (( external_services.nats.machines ))
        username: (( external_services.nats.user ))
        password: (( external_services.nats.password ))
        port: (( external_services.nats.port ))

    receptor:
      etcd:
        machines: (( .properties.diego.etcd.machines ))
      nats:
        machines: (( external_services.nats.machines ))
        username: (( external_services.nats.user ))
        password: (( external_services.nats.password ))
        port: (( external_services.nats.port ))
      register_with_router: (( merge || false ))
      domain_names: (( merge || [] ))
      username: ""
      password: ""

    rep:
      etcd:
        machines: (( .properties.diego.etcd.machines ))

    route_emitter:
      etcd:
        machines: (( .properties.diego.etcd.machines ))
      nats:
        machines: (( external_services.nats.machines ))
        username: (( external_services.nats.user ))
        password: (( external_services.nats.password ))
        port: (( external_services.nats.port ))

    runtime_metrics_server:
      etcd:
        machines: (( .properties.diego.etcd.machines ))
      nats:
        machines: (( external_services.nats.machines ))
        username: (( external_services.nats.user ))
        password: (( external_services.nats.password ))
        port: (( external_services.nats.port ))

    stager:
      diego_api_url: (( .properties.diego.api_url ))
      cc:
        base_url: (( external_services.cc.srv_api_uri ))
        basic_auth_password: (( external_services.cc.internal_api_password ))
      lifecycle_bundles: ~
      nats:
        machines: (( external_services.nats.machines ))
        username: (( external_services.nats.user ))
        password: (( external_services.nats.password ))
        port: (( external_services.nats.port ))
      min_disk_mb: ~

    tps:
      diego_api_url: (( .properties.diego.api_url ))
      nats:
        machines: (( external_services.nats.machines ))
        username: (( external_services.nats.user ))
        password: (( external_services.nats.password ))
        port: (( external_services.nats.port ))

    garden-linux: ~
